---
title: "Some Ice Sport Doohickey"
author: "Ian"
categories: [Nuh uh]
image: "HMM.JPEG"
code-fold: true
---

```
import plotly.express as px
import matplotlib.pyplot as plt
import pandas as pd
import statistics
from matplotlib import cm
import csv
import tidypandas as tp
DFGV=pd.read_csv("Goalies.csv", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])
#print(DFGV)
DFSIT = pd.read_csv("SkaterIndividualstats.csv")
#print(DFSIT)
DFSOIS=pd.read_csv("SkaterOnIcestats.csv")
#print(DFG)
DFRG=pd.read_csv("RookieGoalies.csv")
#print(DFRG)
DFRSIT=pd.read_csv("RookieSkaterOnIce.csv")
#print(DFRSIT)
DFRSOIS=pd.read_csv("RookieSkaterIndividual.csv")
#print(DFRSOIS)
```

Let's start with the Vezina trophy for the best goalie.

```
DFGV=pd.read_csv("Goalies.csv", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])
```

First I will filter out goalies who have fewer than 1000 saves

```
filtered_DFGV = DFGV[DFGV['Saves'] >1000]
display(filtered_DFGV)
```

Next I'll sort by the High Danger Save Percentages

```
HDOrder=filtered_DFGV.sort_values(by=['HDSV%'], ascending=[0])
display(HDOrder)
```

One last order that I'm going to perform is to order goalies by save percentage before doing further filtering

```
SVOrder=filtered_DFGV.sort_values(by=['SV%'], ascending=[0])
display(SVOrder)
```

Now I'm going to run another filter on the data. This time I will set a filter that clears out anyone who has a High Danger Save Percentage lower than 80%.

```
HDSVFilter=filtered_DFGV[filtered_DFGV['HDSV%']>0.8]
display(HDSVFilter)
```

Next is a second filter to filter out those who have a saver percentage beneath 90%.

```
SVFilter=HDSVFilter[HDSVFilter['SV%']>0.9]
display(SVFilter)
```

The next two reorderings will be first by HDSV percentage and then by SV percentage

```
HDSVF=SVFilter.sort_values(by=['HDSV%'], ascending=[0])
display(HDSVF)
```

```
SVFF=SVFilter.sort_values(by=['SV%'], ascending=[0])
display(SVFF)
```

```
SAL=SVFilter.sort_values(by=['Shots Against'], ascending=[0])
```

Firstly, I will plot players and their total number of shots against.

```
plt.scatter(SAL['Player'],SAL['Shots Against'])
plt.xticks(SAL['Player'],rotation=90)
plt.ylabel('Shots Against')
plt.title('Players and The Shots Against Them')
plt.show
```

Next I will plot players and their save percentages and high danger save percentages.

```
HDSVLL=SVFF.loc[:,'HDSV%']
SVFFL=SVFF.loc[:,'SV%']
GP=SVFF.loc[:,'Player']
P1=plt.scatter(GP,HDSVLL)
P2=plt.scatter(GP,SVFFL)
plt.xticks(GP,rotation=90)
plt.legend([P1,P2],['HDSV%','SV%'])
plt.title('Players and Their Save and High Danger Save Percentages')
plt.show()
```

# From these plots and the tables generated in filtering and ordering the data I will create my ticket for the Vezina Trophy.
# My ticket is as follows:
# 1) Connor Hellebuyck
# 2) Andrei Vasilevskiy
# 3) Igor Shesterkin
# 4) Mackenzie Blackwood
# 5) Filip Gustavsson

The next trophy is the James Norris Memorial trophy for the best overall defenseman for the position.

The first thing I plan to do is run a filter on the data. For defesnsive players and other pertinent information like GP, TOI, CF, CA, CF% and PDO as metrics for their performance.

```
DFRSOIS=pd.read_csv("SkaterOnIcestats.csv",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])
DFilter=DFRSOIS.sort_values(by=['Position'])
D=DFilter[DFilter['Position']=='D']
display(D)
```

Next I will run a series of filters to filter for time on the ice and games played.

```
DPFilter=D[D['GP']>60]
TOIDFilter=DPFilter[DPFilter['TOI']>1300]
display(TOIDFilter)
```

I will reorder based on the total time on the ice that players are getting.

```
TOIDOrder=TOIDFilter.sort_values(by=['TOI'],ascending=[0])
display(TOIDOrder)
```

From here I can see that CF and CA values don't directly correlate with time on the ice. From here I will reorder based on the CF% as a value greater than 55% is considered to be the best of the best.

```
CFOrder=TOIDOrder.sort_values(by=['CF%'],ascending=[0])
display(CFOrder)
```

```
CF=CFOrder.loc[:,'CF']
TOID=CFOrder.loc[:,'TOI']
DP=CFOrder.loc[:,'Player']
Games=CFOrder.loc[:'GP']
plt.scatter(TOIDOrder['Player'],TOIDOrder['TOI'])
plt.xticks(TOIDOrder['Player'],rotation=90)
plt.ylabel('TIO(seconds)')
plt.title('Players and Their Time on the Ice')
plt.show
```

One final reordering will be based on PDO values as a value greater than one means that players are playing better than expected.

```
PDOrder=TOIDOrder.sort_values(by=['PDO'],ascending=[0])
PDOD=PDOrder.loc[:,'PDO']
display(PDOrder)
```

The following plot will plot players PDO values and their CF values which are their CF percentages divided by 100% to get them to a discrete decimal value scale. I also took the players' time on the ice and divided it by 1000 seconds to get a discrete value for how many seconds they spend on the ice with the basis being 1000 seconds.

```
PD1=plt.scatter(DP,PDOD)
PD2=plt.scatter(DP,PDOrder['CF%']/100)
PD3=plt.scatter(DP,PDOrder['TOI']/1000)
plt.xticks(PDOrder['Player'],rotation=90)
plt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])
plt.ylabel('PDO and discrete CF and TOI values')
plt.title('Players and Their Important Stats')
plt.show()
```

# Based on the above visualization my ticket for the James Norris Memorial Trophy is as follows:
# 1) Lane Hutson
# 2) Erik Karlsson
# 3) John Carlson
# 4) Alex Vlasic
# 5) Brent Burns

The next trophy is going to be the Calder Memorial Trophy which goes to the best rookie in the league. I'm going to divide the data for rookies between goalies and non-goalies.

First comes the rookie goalies. The data will be reordered to show who has had the most shots taken against them. Then the first filter will be applied. This will be based on games played.

```
DFRG=pd.read_csv("RookieGoalies.csv",usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])
DFRGFilter=DFRG[DFRG['GP']>25]
DFRGSAO=DFRG.sort_values(by=['Shots Against'],ascending=[0])
display(DFRGSAO,DFRGFilter)
```

```
RGSV=DFRGFilter.loc[:,'SV%']
RGHDSV=DFRGFilter.loc[:,'HDSV%']
RGP=DFRGFilter.loc[:,'Player']
PRG1=plt.scatter(RGP,RGSV)
PRG2=plt.scatter(RGP,RGHDSV)
plt.legend([PRG1,PRG2],['SV%','HDSV%'])
plt.xticks(RGP,rotation=90)
plt.ylabel('SV and HDSV Percentages')
plt.title('Rookie Goalies and The Save They Make')
plt.show()
```

```
RGSAT=DFRGFilter.sort_values(by=['Shots Against'],ascending=[0])
display(RGSAT)
```

```
plt.scatter(RGP,RGSAT['Shots Against'])
plt.xticks(RGP,rotation=90)
plt.ylabel('Shots Against')
plt.title('Rookie Goalies and the shots taken against them')
plt.show
```

# Before moving on to other rookies I want to list my top five rookie goalies who I will consider for the Calder Memorial Trophy in conjunction with all other rookies.
# The list is as follows:
# 1) Dustin Wolf
# 2) Logan Thompson
# 3) Lukas Dostal
# 4) Pyotr Kochetkov
# 5) Joseph Woll

For the rest of the rookies I will initially pull all the data and filter them out by having a minimum CF value of 1100 and a minimum time on the ice of 1100 seconds. I'll then reorder the rookie skater on ice data by PDO and CF% values in descending order. Afterward I will scale the CF% by dividing them by 100 to get them on the same scale as the PDO values and plot them against each other.

```
DFRSIT=pd.read_csv("RookieSkaterOnIce.csv")
DFRSOIS=pd.read_csv("RookieSkaterIndividual.csv")
DFRSITFilter=DFRSIT[DFRSIT['CF']>1100]
DFRSOISFilter=DFRSOIS[DFRSOIS['TOI']>1050]
PDOROrder=DFRSITFilter.sort_values(by=['PDO'],ascending=[0])
RCFOrder=PDOROrder.sort_values(by=['CF%'],ascending=[0])
PDORV=PDOROrder.loc[:,'PDO']
RCFV=RCFOrder.loc[:,'CF%']
RGOL=DFRSOISFilter.loc[:,'Goals']
RTAS=DFRSOISFilter.loc[:,'Total Assists']
RTAW=DFRSOISFilter.loc[:,'Takeaways']
RGAW=DFRSOISFilter.loc[:,'Giveaways']
RSB=DFRSOISFilter.loc[:,'Shots Blocked']
RTOI=DFRSOISFilter.loc[:,'TOI']
RPRS=PDOROrder.loc[:,'Player']
EXR=RGOL+RTAS+RTAW+RSB-RGAW
EXRRPRS=DFRSOISFilter.loc[:,'Player']
ORP=pd.DataFrame(DFRSOISFilter['Player'])
OP=pd.DataFrame(EXR)
pd.concat([EXR,ORP],ignore_index=[1])
ORP['EXR']=EXR
ORP['RTOI']=RTOI
NORP=ORP.sort_values(by=['EXR'],ascending=[0])
display(NORP)
RPS1=plt.scatter(RPRS,PDORV)
RPS2=plt.scatter(RPRS,RCFV/100)
plt.xticks(RPRS,rotation=90)
plt.legend([RPS1,RPS2],['PDO','CF%'])
plt.show()
```

I also worked to get goals,total assists, giveaways, takeaways, and shots blocked. I'll plot these against each other.

```
fig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))
plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)
for ax in fig.axes:
    plt.sca(ax)
    plt.xticks(rotation=90)
ax1.scatter(EXRRPRS,RGOL,color='purple')
ax1.scatter(EXRRPRS,RTAS)
ax1.legend(['Goals','Total Assists'])
ax1.title.set_text('Rookie Goals and Assists')

ax2.scatter(EXRRPRS,RTAW,color='red')
ax2.scatter(EXRRPRS,RGAW,color='black')
ax2.scatter(EXRRPRS,RSB,color='green')
ax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')
ax2.legend(['Takeaways','Giveaways','Shots Blocked'])
plt.show()
```

Based on these scatter plots, tables, and my goalie picks I'm going to assemble my list for the Calder Memorial Trophy.

# My List for the Calder Memorial Trophy is as Follows:
# 1) Kirill Marchenko
# 2) Wyatt Johnston
# 3) Dustin Wolf
# 4) Marco Rossi
# 5) Logan Thompson

Next comes the Frank J Selke Trophy for the best overall defenseman in the league. This will include lefts and rights as well.

```
DFRSOIS=pd.read_csv("SkaterOnIcestats.csv",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])
DFilter=DFRSOIS.sort_values(by=['Position'])
DP1=DFilter[DFilter['Position']=='D']
DP2=DFilter[DFilter['Position']=='L']
DP3=DFilter[DFilter['Position']=='R']
DPFilter=DP1[DP1['GP']>60]
DP2Filter=DP2[DP2['GP']>60]
DP3Filter=DP3[DP3['GP']>60]
TOIDFilter=DPFilter[DPFilter['TOI']>1300]
TOID2Filter=DP2Filter[DP2Filter['TOI']>900]
TOID3Filter=DP3Filter[DP3Filter['TOI']>550]
DCFOrder=TOIDFilter.sort_values(by=['CF%'],ascending=[0])
LCFOrder=TOID2Filter.sort_values(by=['CF%'],ascending=[0])
RCFOrder=TOID3Filter.sort_values(by=['CF%'],ascending=[0])
BD=DCFOrder.loc[:,'Player']
BDCF=DCFOrder.loc[:,'CF%']
BR=RCFOrder.loc[:,'Player']
BRCF=RCFOrder.loc[:,'CF%']
BL=LCFOrder.loc[:,'Player']
BLCF=LCFOrder.loc[:,'CF%']
BDD=pd.DataFrame(DCFOrder['Player'])
BDL=pd.DataFrame(LCFOrder['Player'])
BDR=pd.DataFrame(RCFOrder['Player'])
DCF=pd.DataFrame(DCFOrder['CF%'])
LCF=pd.DataFrame(LCFOrder['CF%'])
RCF=pd.DataFrame(RCFOrder['CF%'])
pd.concat([BDD,DCF],ignore_index=[1])
BDD['DCF']=DCF
NBDD=BDD.sort_values(by=['DCF'],ascending=0)
pd.concat([BDL,LCF],ignore_index=[1])
BDL['LCF']=LCF
NBDL=BDL.sort_values(by=['LCF'],ascending=0)
pd.concat([BDR,RCF],ignore_index=[1])
BDR['RCF']=RCF
NBDR=BDR.sort_values(by=['RCF'],ascending=0)
DPDOrder=TOIDFilter.sort_values(by=['PDO'],ascending=[0])
LPDOrder=TOID2Filter.sort_values(by=['PDO'],ascending=[0])
RPDOrder=TOID3Filter.sort_values(by=['PDO'],ascending=[0])
DDD=DPDOrder.loc[:,'Player']
DDP=DPDOrder.loc[:,'PDO']
RRR=RPDOrder.loc[:,'Player']
RRP=RPDOrder.loc[:,'PDO']
LLL=LPDOrder.loc[:,'Player']
LLP=LPDOrder.loc[:,'PDO']
DPDO=pd.DataFrame(DPDOrder['PDO'])
RPDO=pd.DataFrame(RPDOrder['PDO'])
LPDO=pd.DataFrame(LPDOrder['PDO'])
DPDOP=pd.DataFrame(DPDOrder['Player'])
RPDOP=pd.DataFrame(RPDOrder['Player'])
LPDOP=pd.DataFrame(LPDOrder['Player'])
pd.concat([DPDOP,DPDO],ignore_index=[1])
DPDOP['PDO']=DPDO
NDPDOP=DPDOP.sort_values(by=['PDO'],ascending=0)
pd.concat([RPDOP,RPDO],ignore_index=[1])
RPDOP['PDO']=RPDO
NRPDOP=RPDOP.sort_values(by=['PDO'],ascending=0)
pd.concat([LPDOP],ignore_index=[1])
LPDOP['PDO']=LPDO
NLPDOP=LPDOP.sort_values(by=['PDO'],ascending=0)
DCFTOI=pd.DataFrame(DCFOrder['TOI'])
RCFTOI=pd.DataFrame(RCFOrder['TOI'])
LCFTOI=pd.DataFrame(LCFOrder['TOI'])
pd.concat([NBDD,DCFTOI],ignore_index=[1])
NBDD['DCFTOI']=DCFTOI
pd.concat([NBDD,DCFTOI],ignore_index=[1])
NBDR['RCFTOI']=RCFTOI
pd.concat([NBDD,DCFTOI],ignore_index=[1])
NBDL['LCFTOI']=LCFTOI
DPDOTOI=pd.DataFrame(DPDOrder['TOI'])
RPDOTOI=pd.DataFrame(RPDOrder['TOI'])
LPDOTOI=pd.DataFrame(LPDOrder['TOI'])
pd.concat([DPDO,DPDOTOI],ignore_index=[1])
DPDO['DPDOTOI']=DPDOTOI
RPDO['RPDOTOI']=RPDOTOI
LPDO['LPDOTOI']=LPDOTOI
OKD=BDCF
OKR=BRCF
OKL=BLCF
```

```
fig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))
plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)
for ax in fig.axes:
    plt.sca(ax)
    plt.xticks(rotation=90)
ax1.scatter(BD,BDCF,color='purple')
ax1.scatter(DDD,OKD,color='gold')
ax1.legend(['CF%','PDO'])
ax1.title.set_text('Defense CF% and PDO')

ax2.scatter(BL,BLCF,color='gold')
ax2.scatter(LLL,OKL,color='green')
ax2.title.set_text('Left Defense CF% and PDO')
ax2.legend(['CF%','PDO'])

ax3.scatter(BR,BRCF,color='gold')
ax3.scatter(RRR,OKR,color='grey')
ax3.title.set_text('Right Defense CF% and PDO')
ax3.legend(['CF%','PDO'])

plt.show()
```

I'm going to exclude time played from this analysis and nomination set because the scale of time on the ice between the different defensive player clusters is too large.

# My list for the Frank J Selke Trophy is as follows:
# 1) Cale Makar
# 2) Jackson Blake
# 3) Pierre-Luc Dubois
# 4) John Carlson
# 5) William Nylander

Next will be the Hart Memorial Trophy for the player dubbed most valuable to his team. For the sake of time this will solely be based off of previously generated visualizaitons.

The first visulization will be for the goalies. Something important to note is that the values in the visualizations will be different for the goalies since they lack a CF% and PDO value compared to offensive and defensive players.

```
HDSVLL=SVFF.loc[:,'HDSV%']
SVFFL=SVFF.loc[:,'SV%']
GP=SVFF.loc[:,'Player']
P1=plt.scatter(GP,HDSVLL)
P2=plt.scatter(GP,SVFFL)
plt.xticks(GP,rotation=90)
plt.legend([P1,P2],['HDSV%','SV%'])
plt.title('Players and Their Save and High Danger Save Percentages')
plt.show()
```

Next will be the defensemen.

```
PD1=plt.scatter(DP,PDOD)
PD2=plt.scatter(DP,PDOrder['CF%']/100)
PD3=plt.scatter(DP,PDOrder['TOI']/1000)
plt.xticks(PDOrder['Player'],rotation=90)
plt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])
plt.ylabel('PDO and discrete CF and TOI values')
plt.title('Players and Their Important Stats')
plt.show()
```

Now come all the defensive players including the left and right defenders.

```
fig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))
plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)
for ax in fig.axes:
    plt.sca(ax)
    plt.xticks(rotation=90)
ax1.scatter(BD,BDCF,color='purple')
ax1.scatter(DDD,OKD,color='gold')
ax1.legend(['CF%','PDO'])
ax1.title.set_text('Defense CF% and PDO')

ax2.scatter(BL,BLCF,color='gold')
ax2.scatter(LLL,OKL,color='green')
ax2.title.set_text('Left Defense CF% and PDO')
ax2.legend(['CF%','PDO'])

ax3.scatter(BR,BRCF,color='gold')
ax3.scatter(RRR,OKR,color='grey')
ax3.title.set_text('Right Defense CF% and PDO')
ax3.legend(['CF%','PDO'])

plt.show()
```

Lastly, we'll bring the rookies into the ring since they too deserve to be considered for being the most valuable player potentially.

```
RGSV=DFRGFilter.loc[:,'SV%']
RGHDSV=DFRGFilter.loc[:,'HDSV%']
RGP=DFRGFilter.loc[:,'Player']
PRG1=plt.scatter(RGP,RGSV)
PRG2=plt.scatter(RGP,RGHDSV)
plt.legend([PRG1,PRG2],['SV%','HDSV%'])
plt.xticks(RGP,rotation=90)
plt.ylabel('SV and HDSV Percentages')
plt.title('Rookie Goalies and The Save They Make')
plt.show()
```

```
fig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))
plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)
for ax in fig.axes:
    plt.sca(ax)
    plt.xticks(rotation=90)
ax1.scatter(EXRRPRS,RGOL,color='purple')
ax1.scatter(EXRRPRS,RTAS)
ax1.legend(['Goals','Total Assists'])
ax1.title.set_text('Rookie Goals and Assists')

ax2.scatter(EXRRPRS,RTAW,color='red')
ax2.scatter(EXRRPRS,RGAW,color='black')
ax2.scatter(EXRRPRS,RSB,color='green')
ax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')
ax2.legend(['Takeaways','Giveaways','Shots Blocked'])
plt.show()
```

Now that all of the previously generated visualiztions are here, it's time to get a new one added to the mix. Essentially it'll be just like the Rookie Goals and Assists set of visualizations but for the more seasoned skaters. TOI will be divided by 100 seconds to properly scale it and discreitze it so it can be more easily visualized.

```
DFSIT = pd.read_csv("SkaterOnIcestats.csv")
DFSITFilter=DFSIT[DFSIT['CF']>1550]
PDOSOrder=DFSITFilter.sort_values(by=['PDO'],ascending=[0])
SCFOrder=PDOSOrder.sort_values(by=['CF%'],ascending=[0])
PDOSV=PDOSOrder.loc[:,'PDO']
SCFV=SCFOrder.loc[:,'CF%']/100
SGOL=PDOSOrder.loc[:,'GF%']
STAS=DFSITFilter.loc[:,'FA']
STAHDG=DFSITFilter.loc[:,'HDGF%']
SGAW=DFSITFilter.loc[:,'GA']
SSB=DFSITFilter.loc[:,'On-Ice SV%']
STOI=DFSITFilter.loc[:,'TOI']/100
SPRS=PDOSOrder.loc[:,'Player']
EXSRPRS=DFSITFilter.loc[:,'Player']
OSP=pd.DataFrame(DFSITFilter['Player'])
```

```
fig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))
plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)
for ax in fig.axes:
    plt.sca(ax)
    plt.xticks(rotation=90)
ax1.scatter(SPRS,PDOSV,color='purple')
ax1.scatter(SPRS,SCFV)
ax1.legend(['Goals','high Danger Goals'])
ax1.title.set_text('PDO and CF')

ax2.scatter(EXSRPRS,SSB,color='red')
ax2.scatter(EXSRPRS,STAHDG,color='black')
ax2.scatter(EXSRPRS,STOI,color='green')
ax2.title.set_text('On-Ice SV%, HDGF%, and TOI')
ax2.legend(['On-Ice SV%','HDGF%','TOI (x100)'])
plt.show()
```

# Now it comes time to make my picks for the Hart Memorial Trophy. The list is as follows:
# 1) Connor Hellbuyck
# 2) Zach Weresnki
# 3) Kirill Marchenko
# 4) Dustin Wolf
# 5) John Carlson

Lastly comes the Lady Byng trophy given to the athlete who displays the best sportsmanship and skills. Information related to skill is going to be pulled from the Hart Memorial Trophy visualizations above, but for sportsmanship the primary metrics being looked at will be penalties incurred by skaters.

```
RPEN=pd.read_csv("RookieSkaterIndividual.csv",usecols=['Player','TOI','PIM','Total Penalties','Minor','Major','Misconduct','Penalties Drawn'])
SPEN=pd.read_csv("SkaterIndividualstats.csv",usecols=['Player','TOI','PIM','Total Penalties','Minor','Major','Misconduct','Penalties Drawn'])
SPEN.sort_values(by=['Major'],ascending=[1])
SPENFilter=SPEN[SPEN['TOI']>1400]
display(SPENFilter)
SPPS=SPENFilter.loc[:,'Player']
SPIM=SPENFilter.loc[:,'PIM']
STP=SPENFilter.loc[:,'Total Penalties']
SMI=SPENFilter.loc[:,'Minor']
SMJ=SPENFilter.loc[:,'Major']
SMC=SPENFilter.loc[:,'Misconduct']
SPD=SPENFilter.loc[:,'Penalties Drawn']
SPENT=SPIM+STP+SMI+SMJ+SMC+SPD
SPENT1=pd.DataFrame(SPENT)
SPPS1=pd.DataFrame(SPPS)
AG=pd.concat([SPENT,SPPS],ignore_index=[1])
SPPS1['SPENT1']=SPENT1
SPPS1.sort_values(by=['SPENT1'],ascending=[1])
```

The players with the best sportmanship will have the lowest SPENT1 values above. The problem is that there are tons of them with a score of 0. I then sorted by TOI with a minimum TOI of 1500 required. From here I looked at more seasoned players who were in the above nominations. These include Cale Makar, Erik Karlsson, John Carlson, and Zach Werenski. Next will come the rookies.

```
RPENFilter=RPEN[RPEN['TOI']>1000]
display(RPENFilter)
RPPS=RPENFilter.loc[:,'Player']
RPIM=RPENFilter.loc[:,'PIM']
RTP=RPENFilter.loc[:,'Total Penalties']
RMI=RPENFilter.loc[:,'Minor']
RMJ=RPENFilter.loc[:,'Major']
RMC=RPENFilter.loc[:,'Misconduct']
RPD=RPENFilter.loc[:,'Penalties Drawn']
RPENT=RPIM+RTP+RMI+RMJ+RMC+RPD
RPENT1=pd.DataFrame(RPENT)
RPPS1=pd.DataFrame(RPPS)
RG=pd.concat([RPENT,RPPS],ignore_index=[1])
RPPS1['RPENT1']=RPENT1
RPPS1.sort_values(by=['RPENT1'],ascending=[1])
```

```
Cale=42
Erik=43
John=43
Zach=68
Alex=25
Wyatt=34
Kirill=41
```

Some names seen previously include Alex Vlasic, Wyatt Johnston, and Kirill Marchenko. Next comes time to compare these players specifically. Interestingly enough the rookies have lower incursion scores which is the sum of major and minor penalties, penalties drawn, PIM, total penalties, and misconduct.

# My list for the Lady Byng Trophy is as follows:
# 1) Cale Makar
# 2) Kirill Marchenko
# 3) Alex Vlasic
# 4) Erik Karlsson
# 5) John Carlson


