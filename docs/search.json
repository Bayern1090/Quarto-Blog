[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Baden-520-Blog",
    "section": "",
    "text": "Marks and Channels\n\n\n\n\n\n\nMarks and Channels\n\n\n\n\n\n\n\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nIt me\n\n\n\n\n\n\nfuny\n\n\n\n\n\n\n\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nActions and Targets\n\n\n\n\n\n\nActions and Targets\n\n\n\n\n\n\n\n\n\nFeb 19, 2025\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nwhat\n\n\n\n\n\n\n\n\n\nFeb 13, 2025\n\n\nIan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "It me",
    "section": "",
    "text": "This is a post with executable code (maybe)\nFun youtube video: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nx = np.array([10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5])\ny1 = np.array([8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68])\ny2 = np.array([9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74])\ny3 = np.array([7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73])\nx4 = np.array([8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8])\ny4 = np.array([6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89])\n\nxmean=np.mean(x)\nx4mean=np.mean(x4)\ny1var=statistics.variance(y1)\ny2var=statistics.variance(y2)\ny3var=statistics.variance(y3)\ny4var=statistics.variance(y4)\ny1mean=np.mean(y1)\ny2mean=np.mean(y2)\ny3mean=np.mean(y3)\ny4mean=np.mean(y4)\n\ndata = {'Set':[1,2,3,4], \n        'X Mean': [x4mean, x4mean, x4mean, x4mean], \n        'Y Variances': [y1var,y2var,y3var,y4var], \n        'Y Means':[y1mean,y2mean,y3mean,y4mean]}\ndf = pd.DataFrame(data)\n#print(df)\n\n#Regressions\nm1,b1=np.polyfit(x,y1,1)\nm2,b2=np.polyfit(x,y2,1)\nm3,b3=np.polyfit(x,y3,1)\nm4,b4=np.polyfit(x4,y4,1)\nxl=np.arange(20)\n\nplt.subplot(2,2,1)\nplt.plot(x,y1,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x,y1,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.127')\nplt.plot(x,m1*x+b1,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(4, 11)\nplt.show()\nplt.subplot(2,2,2)\nplt.plot(x,y2,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x,y2,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.127')\nplt.plot(x,m2*x+b2,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(4, 11)\nplt.show()\nplt.subplot(2,2,3)\nplt.plot(x,y3,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x,y3,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.123')\nplt.plot(x,m3*x+b3,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(4, 11)\nplt.show()\nplt.subplot(2,2,4)\nplt.xlim(7,20)\nplt.plot(x4,y4,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x4,y4,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.123')\nplt.plot(0.4999*xl+3.0017,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(5, 13)\nplt.show()\n\npd.melt(df, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None, ignore_index=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nSet\n1.000000\n\n\n1\nSet\n2.000000\n\n\n2\nSet\n3.000000\n\n\n3\nSet\n4.000000\n\n\n4\nX Mean\n9.000000\n\n\n5\nX Mean\n9.000000\n\n\n6\nX Mean\n9.000000\n\n\n7\nX Mean\n9.000000\n\n\n8\nY Variances\n4.127269\n\n\n9\nY Variances\n4.127629\n\n\n10\nY Variances\n4.122620\n\n\n11\nY Variances\n4.123249\n\n\n12\nY Means\n7.500909\n\n\n13\nY Means\n7.500909\n\n\n14\nY Means\n7.500000\n\n\n15\nY Means\n7.500909"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog This is nothing more than an attempt to create a blog in quarto at this moment"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image is here."
  },
  {
    "objectID": "posts/actions-and-targets/Assignment3.html",
    "href": "posts/actions-and-targets/Assignment3.html",
    "title": "Actions and Targets",
    "section": "",
    "text": "title: This will be a basic demonstration of different visuals to represent data. THe dataset chosen is going to be electoral results from the 2002 German federal election. Each of the main parties’ results were taken and analyzed at a Bundesland (State) level and then visualized both independently and in common spaces. The following data are from 2002 wherein the SPD (Social Democratic Party of Germany) and the Greens won the election as a coalition and remained in power. An important thing to note is that elections in the Bundestag work differently than the US. The system over there has a plurality of political parties, with no one party maintaining dominance over others. This often results in different parties needing to form coalitions with each other in order to win elections and rule the country with the largest party of the coalition usually being the one whose leader becomes Kanzler or Kanzlerin. jupyter: python3\n\n\nLet’s begin with this foray into data visualization. Sections below will have German as comments that will split each section that describe the data in them. The Bundestag Sitzplaetze section contains the number of Bundestag seats each party had out of the total seats that it had that year. Sections beneath will report the results for each party by Bundesland and by percent of the votes of that Bundesland that they won.\n\n\nOne last important detail before getting to code and visualizations is the clarification of potential action-target pairs present in this post. The desired action here is for viewers to analyze and consume trends and outliers present in the 2002 german election. Another desired action is for viewers to identify and compare attributes of the election like the location of party strongholds and distributions of where certain parties were most successful.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\n\n\n2002 Bundestag sitzplaetze resultaten\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\n\n\nResultaten Fuer SPD 2002 bei Bundesland in prozent\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\n\n\nResultaten fuer Union (UN) 2002 bei Bundesland in prozent\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\n\n\nResultaten fuer Buendnis/Die Gruene 2002 bei Bundesland in prozent\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\n\n\nResultaten fuer FDP 2002 bei Bundesland in Prozent\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\n\n\nResultaten fuer PDS 2002 bei Bundesland in Prozent\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\n\n\nBundesland results by Bundesland comparing the votes percentages each party got in that Bundesland.\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\n\nWhat follows next will be a set of visualizations for the data from above. The first bar graph beneath will include all of the parties results for each Bundesland stacked next to each other for that specific Bundesland. An important side note is that abbreviations are used in the legend. The main ones that may be confusing are the BG90 and Union parties. BG90 is short for Buendnis 90/Die Gruene, this is party are the Greens. Union on the other hand is a coalition between the CSU and CDU parties which are centre right political parties.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,3, 5, 7,9, 11, 13, 15,17, 19, 21, 23,25, 27, 29, 31]);\nplt.bar(Laender -0.1, SPD02DE, 0.4, label = 'SPD',color='red') \nplt.bar(Laender - 0.5, UN02DE, 0.4, label = 'Union',color='black') \nplt.bar(Laender - 0.9, BG02DE, 0.4, label = 'BG90',color='green') \nplt.bar(Laender + 0.3, FDP02DE, 0.4, label = 'FDP',color='#FFFF00') \nplt.bar(Laender + 0.8, PDS02DE, 0.4, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nNext will be a bar graph just like above, except the parties’ results are overlaid on to one another. Both of these bar graphs will be pertinent in a future post regarding marks and channels used in visualizations.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.bar(Laender, BG02DE, label = 'SPDE',color='green') \nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nBeneath will be a set of bar grpahs that present the results for individual parties in each Bundesland in Germany. The first will be the winning party, SPD.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 SPD Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nNext will be the Union party\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 Union Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nResults for Buendnis 90/ Die Gruene\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, BG02DE, label = 'BG90',color='green') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 BG90 Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nThe bar graph beneath for the FDP in 2002 is an important lesson in choosing colors wisely when presenting data. In the form directly beneath, the yellow on top of white is glaringly bright and makes distinction of votes percentages far more difficult.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nInstead, let’s change the background to blue with an unintended consequence that it now looks like a very poorly done offbrand ikea illustration. However, with the blue background the ability to determine the percentage that the SPD earned in each state is much easier. I did try using black but very quickly realized that black made it very difficult to see where the percentages are as well.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nax = plt.gca()  \n# Setting Background colour yellow \nax.set_facecolor(\"blue\")\nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nBeneath will be the final party of 2002 being looked at, the PDS who have since renamed to Die Linke (The Left).\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 PDS Election Results\") \nplt.legend() \nplt.show()"
  },
  {
    "objectID": "posts/actions-and-targets/Index.html",
    "href": "posts/actions-and-targets/Index.html",
    "title": "Actions and Targets",
    "section": "",
    "text": "This will be a basic demonstration of different visuals to represent data. The dataset chosen is going to be electoral results from the 2002 German federal election. Each of the main parties’ results were taken and analyzed at a Bundesland (State) level and then visualized both independently and in common spaces. The following data are from 2002 wherein the SPD (Social Democratic Party of Germany) and the Greens won the election as a coalition and remained in power. An important thing to note is that elections in the Bundestag work differently than the US. The system over there has a plurality of political parties, with no one party maintaining dominance over others. This often results in different parties needing to form coalitions with each other in order to win elections and rule the country with the largest party of the coalition usually being the one whose leader becomes Kanzler or Kanzlerin.\nLet’s begin with this foray into data visualization. Sections below will have German as comments that will split each section that describe the data in them. The Bundestag Sitzplaetze section contains the number of Bundestag seats each party had out of the total seats that it had that year. Sections beneath will report the results for each party by Bundesland and by percent of the votes of that Bundesland that they won.\nOne last important detail before getting to code and visualizations is the clarification of potential action-target pairs present in this post. The desired action here is for viewers to analyze and consume trends and outliers present in the 2002 german election. Another desired action is for viewers to identify and compare attributes of the election like the location of party strongholds and distributions of where certain parties were most successful.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\n\n2002 Bundestag sitzplaetze resultaten\n\n\nCode\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\n\nResultaten Fuer SPD 2002 bei Bundesland in prozent\n\n\nCode\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\n\nResultaten fuer Union (UN) 2002 bei Bundesland in prozent\n\n\nCode\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\n\nResultaten fuer Buendnis/Die Gruene 2002 bei Bundesland in prozent\n\n\nCode\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\n\nResultaten fuer FDP 2002 bei Bundesland in Prozent\n\n\nCode\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\n\nResultaten fuer PDS 2002 bei Bundesland in Prozent\n\n\nCode\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\n\nBundesland results by Bundesland comparing the votes percentages each party got in that Bundesland.\n\n\nCode\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nWhat follows next will be a set of visualizations for the data from above. The first bar graph beneath will include all of the parties results for each Bundesland stacked next to each other for that specific Bundesland. An important side note is that abbreviations are used in the legend. The main ones that may be confusing are the BG90 and Union parties. BG90 is short for Buendnis 90/Die Gruene, this is party are the Greens. Union on the other hand is a coalition between the CSU and CDU parties which are centre right political parties.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,3, 5, 7,9, 11, 13, 15,17, 19, 21, 23,25, 27, 29, 31]);\nplt.bar(Laender -0.1, SPD02DE, 0.4, label = 'SPD',color='red') \nplt.bar(Laender - 0.5, UN02DE, 0.4, label = 'Union',color='black') \nplt.bar(Laender - 0.9, BG02DE, 0.4, label = 'BG90',color='green') \nplt.bar(Laender + 0.3, FDP02DE, 0.4, label = 'FDP',color='#FFFF00') \nplt.bar(Laender + 0.8, PDS02DE, 0.4, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nNext will be a bar graph just like above, except the parties’ results are overlaid on to one another. Both of these bar graphs will be pertinent in a future post regarding marks and channels used in visualizations.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.bar(Laender, BG02DE, label = 'SPDE',color='green') \nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nBeneath will be a set of bar grpahs that present the results for individual parties in each Bundesland in Germany. The first will be the winning party, SPD.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 SPD Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nNext will be the Union party\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 Union Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nResults for Buendnis 90/ Die Gruene\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, BG02DE, label = 'BG90',color='green') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 BG90 Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nThe bar graph beneath for the FDP in 2002 is an important lesson in choosing colors wisely when presenting data. In the form directly beneath, the yellow on top of white is glaringly bright and makes distinction of votes percentages far more difficult.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nInstead, let’s change the background to blue with an unintended consequence that it now looks like a very poorly done offbrand ikea illustration. However, with the blue background the ability to determine the percentage that the SPD earned in each state is much easier. I did try using black but very quickly realized that black made it very difficult to see where the percentages are as well.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nax = plt.gca()  \nax.set_facecolor(\"blue\")\nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nBeneath will be the final party of 2002 being looked at, the PDS who have since renamed to Die Linke (The Left).\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 PDS Election Results\") \nplt.legend() \nplt.show()"
  },
  {
    "objectID": "posts/marks-and-channels/MNC.html",
    "href": "posts/marks-and-channels/MNC.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "‘This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.’\nLet us skip all the boring code since it is all going to eb recycled from the last post.’\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\n‘Now begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph.’\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\n\nCode\n'Very gelb much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.'\n\n\n'Very gelb much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.'\n\n\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\n\n\nCode\n'Maybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.'\n\n\n'Maybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.'\n\n\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n'The next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it will shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which  states are where within this box plot.'\n\n\n'The next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it will shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which  states are where within this box plot.'\n\n\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()"
  },
  {
    "objectID": "posts/marks-and-channels/MNC1.html",
    "href": "posts/marks-and-channels/MNC1.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.\nLet us skip all the boring code since it is all going to eb recycled from the last post.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nNow begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nVery yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\nMaybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThe next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it’ll shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which states are where within this box plot.\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()"
  }
]