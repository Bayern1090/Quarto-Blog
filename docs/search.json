[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Baden-520-Blog",
    "section": "",
    "text": "Some Ice Sport Doohickey\n\n\n\n\n\n\nNuh uh\n\n\n\n\n\n\n\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nMarks and Channels\n\n\n\n\n\n\nMarks and Channels\n\n\n\n\n\n\n\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nIt me\n\n\n\n\n\n\nfuny\n\n\n\n\n\n\n\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nActions and Targets\n\n\n\n\n\n\nActions and Targets\n\n\n\n\n\n\n\n\n\nFeb 19, 2025\n\n\nIan\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nwhat\n\n\n\n\n\n\n\n\n\nFeb 13, 2025\n\n\nIan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "It me",
    "section": "",
    "text": "This is a post with executable code (maybe)\nFun youtube video: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nx = np.array([10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5])\ny1 = np.array([8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68])\ny2 = np.array([9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74])\ny3 = np.array([7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73])\nx4 = np.array([8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8])\ny4 = np.array([6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89])\n\nxmean=np.mean(x)\nx4mean=np.mean(x4)\ny1var=statistics.variance(y1)\ny2var=statistics.variance(y2)\ny3var=statistics.variance(y3)\ny4var=statistics.variance(y4)\ny1mean=np.mean(y1)\ny2mean=np.mean(y2)\ny3mean=np.mean(y3)\ny4mean=np.mean(y4)\n\ndata = {'Set':[1,2,3,4], \n        'X Mean': [x4mean, x4mean, x4mean, x4mean], \n        'Y Variances': [y1var,y2var,y3var,y4var], \n        'Y Means':[y1mean,y2mean,y3mean,y4mean]}\ndf = pd.DataFrame(data)\n#print(df)\n\n#Regressions\nm1,b1=np.polyfit(x,y1,1)\nm2,b2=np.polyfit(x,y2,1)\nm3,b3=np.polyfit(x,y3,1)\nm4,b4=np.polyfit(x4,y4,1)\nxl=np.arange(20)\n\nplt.subplot(2,2,1)\nplt.plot(x,y1,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x,y1,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.127')\nplt.plot(x,m1*x+b1,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(4, 11)\nplt.show()\nplt.subplot(2,2,2)\nplt.plot(x,y2,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x,y2,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.127')\nplt.plot(x,m2*x+b2,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(4, 11)\nplt.show()\nplt.subplot(2,2,3)\nplt.plot(x,y3,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x,y3,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.123')\nplt.plot(x,m3*x+b3,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(4, 11)\nplt.show()\nplt.subplot(2,2,4)\nplt.xlim(7,20)\nplt.plot(x4,y4,'.',c=\"blue\",label=r'$\\mu$ = 7.5')\nplt.plot(x4,y4,'.',c=\"blue\",label=r'$\\sigma ^2$ = 4.123')\nplt.plot(0.4999*xl+3.0017,color='red')\nplt.legend(loc=\"lower right\")\nplt.ylim(5, 13)\nplt.show()\n\npd.melt(df, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None, ignore_index=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nSet\n1.000000\n\n\n1\nSet\n2.000000\n\n\n2\nSet\n3.000000\n\n\n3\nSet\n4.000000\n\n\n4\nX Mean\n9.000000\n\n\n5\nX Mean\n9.000000\n\n\n6\nX Mean\n9.000000\n\n\n7\nX Mean\n9.000000\n\n\n8\nY Variances\n4.127269\n\n\n9\nY Variances\n4.127629\n\n\n10\nY Variances\n4.122620\n\n\n11\nY Variances\n4.123249\n\n\n12\nY Means\n7.500909\n\n\n13\nY Means\n7.500909\n\n\n14\nY Means\n7.500000\n\n\n15\nY Means\n7.500909"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog This is nothing more than an attempt to create a blog in quarto at this moment"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image is here."
  },
  {
    "objectID": "posts/actions-and-targets/Assignment3.html",
    "href": "posts/actions-and-targets/Assignment3.html",
    "title": "Actions and Targets",
    "section": "",
    "text": "title: This will be a basic demonstration of different visuals to represent data. THe dataset chosen is going to be electoral results from the 2002 German federal election. Each of the main parties’ results were taken and analyzed at a Bundesland (State) level and then visualized both independently and in common spaces. The following data are from 2002 wherein the SPD (Social Democratic Party of Germany) and the Greens won the election as a coalition and remained in power. An important thing to note is that elections in the Bundestag work differently than the US. The system over there has a plurality of political parties, with no one party maintaining dominance over others. This often results in different parties needing to form coalitions with each other in order to win elections and rule the country with the largest party of the coalition usually being the one whose leader becomes Kanzler or Kanzlerin. jupyter: python3\n\n\nLet’s begin with this foray into data visualization. Sections below will have German as comments that will split each section that describe the data in them. The Bundestag Sitzplaetze section contains the number of Bundestag seats each party had out of the total seats that it had that year. Sections beneath will report the results for each party by Bundesland and by percent of the votes of that Bundesland that they won.\n\n\nOne last important detail before getting to code and visualizations is the clarification of potential action-target pairs present in this post. The desired action here is for viewers to analyze and consume trends and outliers present in the 2002 german election. Another desired action is for viewers to identify and compare attributes of the election like the location of party strongholds and distributions of where certain parties were most successful.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\n\n\n2002 Bundestag sitzplaetze resultaten\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\n\n\nResultaten Fuer SPD 2002 bei Bundesland in prozent\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\n\n\nResultaten fuer Union (UN) 2002 bei Bundesland in prozent\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\n\n\nResultaten fuer Buendnis/Die Gruene 2002 bei Bundesland in prozent\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\n\n\nResultaten fuer FDP 2002 bei Bundesland in Prozent\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\n\n\nResultaten fuer PDS 2002 bei Bundesland in Prozent\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\n\n\nBundesland results by Bundesland comparing the votes percentages each party got in that Bundesland.\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\n\nWhat follows next will be a set of visualizations for the data from above. The first bar graph beneath will include all of the parties results for each Bundesland stacked next to each other for that specific Bundesland. An important side note is that abbreviations are used in the legend. The main ones that may be confusing are the BG90 and Union parties. BG90 is short for Buendnis 90/Die Gruene, this is party are the Greens. Union on the other hand is a coalition between the CSU and CDU parties which are centre right political parties.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,3, 5, 7,9, 11, 13, 15,17, 19, 21, 23,25, 27, 29, 31]);\nplt.bar(Laender -0.1, SPD02DE, 0.4, label = 'SPD',color='red') \nplt.bar(Laender - 0.5, UN02DE, 0.4, label = 'Union',color='black') \nplt.bar(Laender - 0.9, BG02DE, 0.4, label = 'BG90',color='green') \nplt.bar(Laender + 0.3, FDP02DE, 0.4, label = 'FDP',color='#FFFF00') \nplt.bar(Laender + 0.8, PDS02DE, 0.4, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nNext will be a bar graph just like above, except the parties’ results are overlaid on to one another. Both of these bar graphs will be pertinent in a future post regarding marks and channels used in visualizations.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.bar(Laender, BG02DE, label = 'SPDE',color='green') \nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nBeneath will be a set of bar grpahs that present the results for individual parties in each Bundesland in Germany. The first will be the winning party, SPD.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 SPD Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nNext will be the Union party\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 Union Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nResults for Buendnis 90/ Die Gruene\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, BG02DE, label = 'BG90',color='green') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 BG90 Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nThe bar graph beneath for the FDP in 2002 is an important lesson in choosing colors wisely when presenting data. In the form directly beneath, the yellow on top of white is glaringly bright and makes distinction of votes percentages far more difficult.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nInstead, let’s change the background to blue with an unintended consequence that it now looks like a very poorly done offbrand ikea illustration. However, with the blue background the ability to determine the percentage that the SPD earned in each state is much easier. I did try using black but very quickly realized that black made it very difficult to see where the percentages are as well.\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nax = plt.gca()  \n# Setting Background colour yellow \nax.set_facecolor(\"blue\")\nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\nBeneath will be the final party of 2002 being looked at, the PDS who have since renamed to Die Linke (The Left).\n\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 PDS Election Results\") \nplt.legend() \nplt.show()"
  },
  {
    "objectID": "posts/actions-and-targets/Index.html",
    "href": "posts/actions-and-targets/Index.html",
    "title": "Actions and Targets",
    "section": "",
    "text": "This will be a basic demonstration of different visuals to represent data. The dataset chosen is going to be electoral results from the 2002 German federal election. Each of the main parties’ results were taken and analyzed at a Bundesland (State) level and then visualized both independently and in common spaces. The following data are from 2002 wherein the SPD (Social Democratic Party of Germany) and the Greens won the election as a coalition and remained in power. An important thing to note is that elections in the Bundestag work differently than the US. The system over there has a plurality of political parties, with no one party maintaining dominance over others. This often results in different parties needing to form coalitions with each other in order to win elections and rule the country with the largest party of the coalition usually being the one whose leader becomes Kanzler or Kanzlerin.\nLet’s begin with this foray into data visualization. Sections below will have German as comments that will split each section that describe the data in them. The Bundestag Sitzplaetze section contains the number of Bundestag seats each party had out of the total seats that it had that year. Sections beneath will report the results for each party by Bundesland and by percent of the votes of that Bundesland that they won.\nOne last important detail before getting to code and visualizations is the clarification of potential action-target pairs present in this post. The desired action here is for viewers to analyze and consume trends and outliers present in the 2002 german election. Another desired action is for viewers to identify and compare attributes of the election like the location of party strongholds and distributions of where certain parties were most successful.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\n\n2002 Bundestag sitzplaetze resultaten\n\n\nCode\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\n\nResultaten Fuer SPD 2002 bei Bundesland in prozent\n\n\nCode\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\n\nResultaten fuer Union (UN) 2002 bei Bundesland in prozent\n\n\nCode\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\n\nResultaten fuer Buendnis/Die Gruene 2002 bei Bundesland in prozent\n\n\nCode\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\n\nResultaten fuer FDP 2002 bei Bundesland in Prozent\n\n\nCode\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\n\nResultaten fuer PDS 2002 bei Bundesland in Prozent\n\n\nCode\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\n\nBundesland results by Bundesland comparing the votes percentages each party got in that Bundesland.\n\n\nCode\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nWhat follows next will be a set of visualizations for the data from above. The first bar graph beneath will include all of the parties results for each Bundesland stacked next to each other for that specific Bundesland. An important side note is that abbreviations are used in the legend. The main ones that may be confusing are the BG90 and Union parties. BG90 is short for Buendnis 90/Die Gruene, this is party are the Greens. Union on the other hand is a coalition between the CSU and CDU parties which are centre right political parties.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,3, 5, 7,9, 11, 13, 15,17, 19, 21, 23,25, 27, 29, 31]);\nplt.bar(Laender -0.1, SPD02DE, 0.4, label = 'SPD',color='red') \nplt.bar(Laender - 0.5, UN02DE, 0.4, label = 'Union',color='black') \nplt.bar(Laender - 0.9, BG02DE, 0.4, label = 'BG90',color='green') \nplt.bar(Laender + 0.3, FDP02DE, 0.4, label = 'FDP',color='#FFFF00') \nplt.bar(Laender + 0.8, PDS02DE, 0.4, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nNext will be a bar graph just like above, except the parties’ results are overlaid on to one another. Both of these bar graphs will be pertinent in a future post regarding marks and channels used in visualizations.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.bar(Laender, BG02DE, label = 'SPDE',color='green') \nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nBeneath will be a set of bar grpahs that present the results for individual parties in each Bundesland in Germany. The first will be the winning party, SPD.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, SPD02DE, label = 'SPD',color='red') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 SPD Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nNext will be the Union party\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, UN02DE, label = 'Union',color='black') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 Union Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nResults for Buendnis 90/ Die Gruene\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, BG02DE, label = 'BG90',color='green') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 BG90 Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nThe bar graph beneath for the FDP in 2002 is an important lesson in choosing colors wisely when presenting data. In the form directly beneath, the yellow on top of white is glaringly bright and makes distinction of votes percentages far more difficult.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nInstead, let’s change the background to blue with an unintended consequence that it now looks like a very poorly done offbrand ikea illustration. However, with the blue background the ability to determine the percentage that the SPD earned in each state is much easier. I did try using black but very quickly realized that black made it very difficult to see where the percentages are as well.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nax = plt.gca()  \nax.set_facecolor(\"blue\")\nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nBeneath will be the final party of 2002 being looked at, the PDS who have since renamed to Die Linke (The Left).\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 PDS Election Results\") \nplt.legend() \nplt.show()"
  },
  {
    "objectID": "posts/marks-and-channels/MNC.html",
    "href": "posts/marks-and-channels/MNC.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "‘This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.’\nLet us skip all the boring code since it is all going to eb recycled from the last post.’\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\n‘Now begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph.’\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\n\n\nCode\n'Very gelb much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.'\n\n\n'Very gelb much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.'\n\n\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\n\n\nCode\n'Maybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.'\n\n\n'Maybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.'\n\n\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n'The next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it will shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which  states are where within this box plot.'\n\n\n'The next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it will shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which  states are where within this box plot.'\n\n\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()"
  },
  {
    "objectID": "posts/marks-and-channels/MNC1.html",
    "href": "posts/marks-and-channels/MNC1.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.\nLet us skip all the boring code since it is all going to eb recycled from the last post.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nNow begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nVery yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\nMaybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThe next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it’ll shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which states are where within this box plot.\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()"
  },
  {
    "objectID": "MNC1.html",
    "href": "MNC1.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.\nLet us skip all the boring code since it is all going to eb recycled from the last post.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nNow begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nVery yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\nMaybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThe next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it’ll shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which states are where within this box plot.\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()"
  },
  {
    "objectID": "posts/marks-and-channels/MNC2.html",
    "href": "posts/marks-and-channels/MNC2.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.\nLet us skip all the boring code since it is all going to eb recycled from the last post.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\nfrom matplotlib import cm\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nNow begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nVery yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\nMaybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThe next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it’ll show minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which states are where within this box plot.\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()\n\n\n\n\n\n\n\n\n\nAlso, there is a favorite one of my experiments in data visuzliation I will add back in here\nThe following plots are attempts to recreate my matlab surface plots. These plots are inevitable Dr. Robison.\n\n\nCode\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nFDP02DE2=FDP02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of FDP Votes in DE 2002')\nsurf = ax.plot_surface(x, y, FDP02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-170, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nPDS02DE2=PDS02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of PDS Votes in DE 2002')\nsurf = ax.plot_surface(x, y, PDS02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-150, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nUN02DE2=UN02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of PDS Votes in DE 2002')\nsurf = ax.plot_surface(x, y, UN02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-150, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)"
  },
  {
    "objectID": "posts/MNC-take-2/MNC2.html",
    "href": "posts/MNC-take-2/MNC2.html",
    "title": "Marks and Channels",
    "section": "",
    "text": "This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc.\nLet us skip all the boring code since it is all going to eb recycled from the last post.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\nfrom matplotlib import cm\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n\n\nNow begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nVery yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n\n\nCode\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n\n\n\n\n\n\n\n\n\nMaybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n\n\nCode\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThe next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it’ll show minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which states are where within this box plot.\n\n\nCode\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()\n\n\n\n\n\n\n\n\n\nAlso, there is a favorite one of my experiments in data visuzliation I will add back in here\nThe following plots are attempts to recreate my matlab surface plots. These plots are inevitable.\n\n\nCode\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nFDP02DE2=FDP02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of FDP Votes in DE 2002')\nsurf = ax.plot_surface(x, y, FDP02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-170, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nPDS02DE2=PDS02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of PDS Votes in DE 2002')\nsurf = ax.plot_surface(x, y, PDS02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-150, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nUN02DE2=UN02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of PDS Votes in DE 2002')\nsurf = ax.plot_surface(x, y, UN02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-150, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)"
  },
  {
    "objectID": "posts/Assignment5/Assignment5.html",
    "href": "posts/Assignment5/Assignment5.html",
    "title": "Some Ice Sport Doohickey",
    "section": "",
    "text": "import plotly.express as px\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport statistics\nfrom matplotlib import cm\nimport csv\nimport tidypandas as tp\nDFGV=pd.read_csv(\"Goalies.csv\", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\n#print(DFGV)\nDFSIT = pd.read_csv(\"SkaterIndividualstats.csv\")\n#print(DFSIT)\nDFSOIS=pd.read_csv(\"SkaterOnIcestats.csv\")\n#print(DFG)\nDFRG=pd.read_csv(\"RookieGoalies.csv\")\n#print(DFRG)\nDFRSIT=pd.read_csv(\"RookieSkaterOnIce.csv\")\n#print(DFRSIT)\nDFRSOIS=pd.read_csv(\"RookieSkaterIndividual.csv\")\n#print(DFRSOIS)\nLet’s start with the Vezina trophy for the best goalie.\nDFGV=pd.read_csv(\"Goalies.csv\", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\nFirst I will filter out goalies who have fewer than 1000 saves\nfiltered_DFGV = DFGV[DFGV['Saves'] &gt;1000]\ndisplay(filtered_DFGV)\nNext I’ll sort by the High Danger Save Percentages\nHDOrder=filtered_DFGV.sort_values(by=['HDSV%'], ascending=[0])\ndisplay(HDOrder)\nOne last order that I’m going to perform is to order goalies by save percentage before doing further filtering\nSVOrder=filtered_DFGV.sort_values(by=['SV%'], ascending=[0])\ndisplay(SVOrder)\nNow I’m going to run another filter on the data. This time I will set a filter that clears out anyone who has a High Danger Save Percentage lower than 80%.\nHDSVFilter=filtered_DFGV[filtered_DFGV['HDSV%']&gt;0.8]\ndisplay(HDSVFilter)\nNext is a second filter to filter out those who have a saver percentage beneath 90%.\nSVFilter=HDSVFilter[HDSVFilter['SV%']&gt;0.9]\ndisplay(SVFilter)\nThe next two reorderings will be first by HDSV percentage and then by SV percentage\nHDSVF=SVFilter.sort_values(by=['HDSV%'], ascending=[0])\ndisplay(HDSVF)\nSVFF=SVFilter.sort_values(by=['SV%'], ascending=[0])\ndisplay(SVFF)\nSAL=SVFilter.sort_values(by=['Shots Against'], ascending=[0])\nFirstly, I will plot players and their total number of shots against.\nplt.scatter(SAL['Player'],SAL['Shots Against'])\nplt.xticks(SAL['Player'],rotation=90)\nplt.ylabel('Shots Against')\nplt.title('Players and The Shots Against Them')\nplt.show\nNext I will plot players and their save percentages and high danger save percentages.\nHDSVLL=SVFF.loc[:,'HDSV%']\nSVFFL=SVFF.loc[:,'SV%']\nGP=SVFF.loc[:,'Player']\nP1=plt.scatter(GP,HDSVLL)\nP2=plt.scatter(GP,SVFFL)\nplt.xticks(GP,rotation=90)\nplt.legend([P1,P2],['HDSV%','SV%'])\nplt.title('Players and Their Save and High Danger Save Percentages')\nplt.show()\n\nFrom these plots and the tables generated in filtering and ordering the data I will create my ticket for the Vezina Trophy.\n\n\nMy ticket is as follows:\n\n\n1) Connor Hellebuyck\n\n\n2) Andrei Vasilevskiy\n\n\n3) Igor Shesterkin\n\n\n4) Mackenzie Blackwood\n\n\n5) Filip Gustavsson\nThe next trophy is the James Norris Memorial trophy for the best overall defenseman for the position.\nThe first thing I plan to do is run a filter on the data. For defesnsive players and other pertinent information like GP, TOI, CF, CA, CF% and PDO as metrics for their performance.\nDFRSOIS=pd.read_csv(\"SkaterOnIcestats.csv\",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])\nDFilter=DFRSOIS.sort_values(by=['Position'])\nD=DFilter[DFilter['Position']=='D']\ndisplay(D)\nNext I will run a series of filters to filter for time on the ice and games played.\nDPFilter=D[D['GP']&gt;60]\nTOIDFilter=DPFilter[DPFilter['TOI']&gt;1300]\ndisplay(TOIDFilter)\nI will reorder based on the total time on the ice that players are getting.\nTOIDOrder=TOIDFilter.sort_values(by=['TOI'],ascending=[0])\ndisplay(TOIDOrder)\nFrom here I can see that CF and CA values don’t directly correlate with time on the ice. From here I will reorder based on the CF% as a value greater than 55% is considered to be the best of the best.\nCFOrder=TOIDOrder.sort_values(by=['CF%'],ascending=[0])\ndisplay(CFOrder)\nCF=CFOrder.loc[:,'CF']\nTOID=CFOrder.loc[:,'TOI']\nDP=CFOrder.loc[:,'Player']\nGames=CFOrder.loc[:'GP']\nplt.scatter(TOIDOrder['Player'],TOIDOrder['TOI'])\nplt.xticks(TOIDOrder['Player'],rotation=90)\nplt.ylabel('TIO(seconds)')\nplt.title('Players and Their Time on the Ice')\nplt.show\nOne final reordering will be based on PDO values as a value greater than one means that players are playing better than expected.\nPDOrder=TOIDOrder.sort_values(by=['PDO'],ascending=[0])\nPDOD=PDOrder.loc[:,'PDO']\ndisplay(PDOrder)\nThe following plot will plot players PDO values and their CF values which are their CF percentages divided by 100% to get them to a discrete decimal value scale. I also took the players’ time on the ice and divided it by 1000 seconds to get a discrete value for how many seconds they spend on the ice with the basis being 1000 seconds.\nPD1=plt.scatter(DP,PDOD)\nPD2=plt.scatter(DP,PDOrder['CF%']/100)\nPD3=plt.scatter(DP,PDOrder['TOI']/1000)\nplt.xticks(PDOrder['Player'],rotation=90)\nplt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])\nplt.ylabel('PDO and discrete CF and TOI values')\nplt.title('Players and Their Important Stats')\nplt.show()\n\n\nBased on the above visualization my ticket for the James Norris Memorial Trophy is as follows:\n\n\n1) Lane Hutson\n\n\n2) Erik Karlsson\n\n\n3) John Carlson\n\n\n4) Alex Vlasic\n\n\n5) Brent Burns\nThe next trophy is going to be the Calder Memorial Trophy which goes to the best rookie in the league. I’m going to divide the data for rookies between goalies and non-goalies.\nFirst comes the rookie goalies. The data will be reordered to show who has had the most shots taken against them. Then the first filter will be applied. This will be based on games played.\nDFRG=pd.read_csv(\"RookieGoalies.csv\",usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\nDFRGFilter=DFRG[DFRG['GP']&gt;25]\nDFRGSAO=DFRG.sort_values(by=['Shots Against'],ascending=[0])\ndisplay(DFRGSAO,DFRGFilter)\nRGSV=DFRGFilter.loc[:,'SV%']\nRGHDSV=DFRGFilter.loc[:,'HDSV%']\nRGP=DFRGFilter.loc[:,'Player']\nPRG1=plt.scatter(RGP,RGSV)\nPRG2=plt.scatter(RGP,RGHDSV)\nplt.legend([PRG1,PRG2],['SV%','HDSV%'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('SV and HDSV Percentages')\nplt.title('Rookie Goalies and The Save They Make')\nplt.show()\nRGSAT=DFRGFilter.sort_values(by=['Shots Against'],ascending=[0])\ndisplay(RGSAT)\nplt.scatter(RGP,RGSAT['Shots Against'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('Shots Against')\nplt.title('Rookie Goalies and the shots taken against them')\nplt.show\n\n\nBefore moving on to other rookies I want to list my top five rookie goalies who I will consider for the Calder Memorial Trophy in conjunction with all other rookies.\n\n\nThe list is as follows:\n\n\n1) Dustin Wolf\n\n\n2) Logan Thompson\n\n\n3) Lukas Dostal\n\n\n4) Pyotr Kochetkov\n\n\n5) Joseph Woll\nFor the rest of the rookies I will initially pull all the data and filter them out by having a minimum CF value of 1100 and a minimum time on the ice of 1100 seconds. I’ll then reorder the rookie skater on ice data by PDO and CF% values in descending order. Afterward I will scale the CF% by dividing them by 100 to get them on the same scale as the PDO values and plot them against each other.\nDFRSIT=pd.read_csv(\"RookieSkaterOnIce.csv\")\nDFRSOIS=pd.read_csv(\"RookieSkaterIndividual.csv\")\nDFRSITFilter=DFRSIT[DFRSIT['CF']&gt;1100]\nDFRSOISFilter=DFRSOIS[DFRSOIS['TOI']&gt;1050]\nPDOROrder=DFRSITFilter.sort_values(by=['PDO'],ascending=[0])\nRCFOrder=PDOROrder.sort_values(by=['CF%'],ascending=[0])\nPDORV=PDOROrder.loc[:,'PDO']\nRCFV=RCFOrder.loc[:,'CF%']\nRGOL=DFRSOISFilter.loc[:,'Goals']\nRTAS=DFRSOISFilter.loc[:,'Total Assists']\nRTAW=DFRSOISFilter.loc[:,'Takeaways']\nRGAW=DFRSOISFilter.loc[:,'Giveaways']\nRSB=DFRSOISFilter.loc[:,'Shots Blocked']\nRTOI=DFRSOISFilter.loc[:,'TOI']\nRPRS=PDOROrder.loc[:,'Player']\nEXR=RGOL+RTAS+RTAW+RSB-RGAW\nEXRRPRS=DFRSOISFilter.loc[:,'Player']\nORP=pd.DataFrame(DFRSOISFilter['Player'])\nOP=pd.DataFrame(EXR)\npd.concat([EXR,ORP],ignore_index=[1])\nORP['EXR']=EXR\nORP['RTOI']=RTOI\nNORP=ORP.sort_values(by=['EXR'],ascending=[0])\ndisplay(NORP)\nRPS1=plt.scatter(RPRS,PDORV)\nRPS2=plt.scatter(RPRS,RCFV/100)\nplt.xticks(RPRS,rotation=90)\nplt.legend([RPS1,RPS2],['PDO','CF%'])\nplt.show()\nI also worked to get goals,total assists, giveaways, takeaways, and shots blocked. I’ll plot these against each other.\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(EXRRPRS,RGOL,color='purple')\nax1.scatter(EXRRPRS,RTAS)\nax1.legend(['Goals','Total Assists'])\nax1.title.set_text('Rookie Goals and Assists')\n\nax2.scatter(EXRRPRS,RTAW,color='red')\nax2.scatter(EXRRPRS,RGAW,color='black')\nax2.scatter(EXRRPRS,RSB,color='green')\nax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')\nax2.legend(['Takeaways','Giveaways','Shots Blocked'])\nplt.show()\nBased on these scatter plots, tables, and my goalie picks I’m going to assemble my list for the Calder Memorial Trophy.\n\n\nMy List for the Calder Memorial Trophy is as Follows:\n\n\n1) Kirill Marchenko\n\n\n2) Wyatt Johnston\n\n\n3) Dustin Wolf\n\n\n4) Marco Rossi\n\n\n5) Logan Thompson\nNext comes the Frank J Selke Trophy for the best overall defenseman in the league. This will include lefts and rights as well.\nDFRSOIS=pd.read_csv(\"SkaterOnIcestats.csv\",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])\nDFilter=DFRSOIS.sort_values(by=['Position'])\nDP1=DFilter[DFilter['Position']=='D']\nDP2=DFilter[DFilter['Position']=='L']\nDP3=DFilter[DFilter['Position']=='R']\nDPFilter=DP1[DP1['GP']&gt;60]\nDP2Filter=DP2[DP2['GP']&gt;60]\nDP3Filter=DP3[DP3['GP']&gt;60]\nTOIDFilter=DPFilter[DPFilter['TOI']&gt;1300]\nTOID2Filter=DP2Filter[DP2Filter['TOI']&gt;900]\nTOID3Filter=DP3Filter[DP3Filter['TOI']&gt;550]\nDCFOrder=TOIDFilter.sort_values(by=['CF%'],ascending=[0])\nLCFOrder=TOID2Filter.sort_values(by=['CF%'],ascending=[0])\nRCFOrder=TOID3Filter.sort_values(by=['CF%'],ascending=[0])\nBD=DCFOrder.loc[:,'Player']\nBDCF=DCFOrder.loc[:,'CF%']\nBR=RCFOrder.loc[:,'Player']\nBRCF=RCFOrder.loc[:,'CF%']\nBL=LCFOrder.loc[:,'Player']\nBLCF=LCFOrder.loc[:,'CF%']\nBDD=pd.DataFrame(DCFOrder['Player'])\nBDL=pd.DataFrame(LCFOrder['Player'])\nBDR=pd.DataFrame(RCFOrder['Player'])\nDCF=pd.DataFrame(DCFOrder['CF%'])\nLCF=pd.DataFrame(LCFOrder['CF%'])\nRCF=pd.DataFrame(RCFOrder['CF%'])\npd.concat([BDD,DCF],ignore_index=[1])\nBDD['DCF']=DCF\nNBDD=BDD.sort_values(by=['DCF'],ascending=0)\npd.concat([BDL,LCF],ignore_index=[1])\nBDL['LCF']=LCF\nNBDL=BDL.sort_values(by=['LCF'],ascending=0)\npd.concat([BDR,RCF],ignore_index=[1])\nBDR['RCF']=RCF\nNBDR=BDR.sort_values(by=['RCF'],ascending=0)\nDPDOrder=TOIDFilter.sort_values(by=['PDO'],ascending=[0])\nLPDOrder=TOID2Filter.sort_values(by=['PDO'],ascending=[0])\nRPDOrder=TOID3Filter.sort_values(by=['PDO'],ascending=[0])\nDDD=DPDOrder.loc[:,'Player']\nDDP=DPDOrder.loc[:,'PDO']\nRRR=RPDOrder.loc[:,'Player']\nRRP=RPDOrder.loc[:,'PDO']\nLLL=LPDOrder.loc[:,'Player']\nLLP=LPDOrder.loc[:,'PDO']\nDPDO=pd.DataFrame(DPDOrder['PDO'])\nRPDO=pd.DataFrame(RPDOrder['PDO'])\nLPDO=pd.DataFrame(LPDOrder['PDO'])\nDPDOP=pd.DataFrame(DPDOrder['Player'])\nRPDOP=pd.DataFrame(RPDOrder['Player'])\nLPDOP=pd.DataFrame(LPDOrder['Player'])\npd.concat([DPDOP,DPDO],ignore_index=[1])\nDPDOP['PDO']=DPDO\nNDPDOP=DPDOP.sort_values(by=['PDO'],ascending=0)\npd.concat([RPDOP,RPDO],ignore_index=[1])\nRPDOP['PDO']=RPDO\nNRPDOP=RPDOP.sort_values(by=['PDO'],ascending=0)\npd.concat([LPDOP],ignore_index=[1])\nLPDOP['PDO']=LPDO\nNLPDOP=LPDOP.sort_values(by=['PDO'],ascending=0)\nDCFTOI=pd.DataFrame(DCFOrder['TOI'])\nRCFTOI=pd.DataFrame(RCFOrder['TOI'])\nLCFTOI=pd.DataFrame(LCFOrder['TOI'])\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDD['DCFTOI']=DCFTOI\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDR['RCFTOI']=RCFTOI\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDL['LCFTOI']=LCFTOI\nDPDOTOI=pd.DataFrame(DPDOrder['TOI'])\nRPDOTOI=pd.DataFrame(RPDOrder['TOI'])\nLPDOTOI=pd.DataFrame(LPDOrder['TOI'])\npd.concat([DPDO,DPDOTOI],ignore_index=[1])\nDPDO['DPDOTOI']=DPDOTOI\nRPDO['RPDOTOI']=RPDOTOI\nLPDO['LPDOTOI']=LPDOTOI\nOKD=BDCF\nOKR=BRCF\nOKL=BLCF\nfig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(BD,BDCF,color='purple')\nax1.scatter(DDD,OKD,color='gold')\nax1.legend(['CF%','PDO'])\nax1.title.set_text('Defense CF% and PDO')\n\nax2.scatter(BL,BLCF,color='gold')\nax2.scatter(LLL,OKL,color='green')\nax2.title.set_text('Left Defense CF% and PDO')\nax2.legend(['CF%','PDO'])\n\nax3.scatter(BR,BRCF,color='gold')\nax3.scatter(RRR,OKR,color='grey')\nax3.title.set_text('Right Defense CF% and PDO')\nax3.legend(['CF%','PDO'])\n\nplt.show()\nI’m going to exclude time played from this analysis and nomination set because the scale of time on the ice between the different defensive player clusters is too large.\n\n\nMy list for the Frank J Selke Trophy is as follows:\n\n\n1) Cale Makar\n\n\n2) Jackson Blake\n\n\n3) Pierre-Luc Dubois\n\n\n4) John Carlson\n\n\n5) William Nylander\nNext will be the Hart Memorial Trophy for the player dubbed most valuable to his team. For the sake of time this will solely be based off of previously generated visualizaitons.\nThe first visulization will be for the goalies. Something important to note is that the values in the visualizations will be different for the goalies since they lack a CF% and PDO value compared to offensive and defensive players.\nHDSVLL=SVFF.loc[:,'HDSV%']\nSVFFL=SVFF.loc[:,'SV%']\nGP=SVFF.loc[:,'Player']\nP1=plt.scatter(GP,HDSVLL)\nP2=plt.scatter(GP,SVFFL)\nplt.xticks(GP,rotation=90)\nplt.legend([P1,P2],['HDSV%','SV%'])\nplt.title('Players and Their Save and High Danger Save Percentages')\nplt.show()\nNext will be the defensemen.\nPD1=plt.scatter(DP,PDOD)\nPD2=plt.scatter(DP,PDOrder['CF%']/100)\nPD3=plt.scatter(DP,PDOrder['TOI']/1000)\nplt.xticks(PDOrder['Player'],rotation=90)\nplt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])\nplt.ylabel('PDO and discrete CF and TOI values')\nplt.title('Players and Their Important Stats')\nplt.show()\nNow come all the defensive players including the left and right defenders.\nfig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(BD,BDCF,color='purple')\nax1.scatter(DDD,OKD,color='gold')\nax1.legend(['CF%','PDO'])\nax1.title.set_text('Defense CF% and PDO')\n\nax2.scatter(BL,BLCF,color='gold')\nax2.scatter(LLL,OKL,color='green')\nax2.title.set_text('Left Defense CF% and PDO')\nax2.legend(['CF%','PDO'])\n\nax3.scatter(BR,BRCF,color='gold')\nax3.scatter(RRR,OKR,color='grey')\nax3.title.set_text('Right Defense CF% and PDO')\nax3.legend(['CF%','PDO'])\n\nplt.show()\nLastly, we’ll bring the rookies into the ring since they too deserve to be considered for being the most valuable player potentially.\nRGSV=DFRGFilter.loc[:,'SV%']\nRGHDSV=DFRGFilter.loc[:,'HDSV%']\nRGP=DFRGFilter.loc[:,'Player']\nPRG1=plt.scatter(RGP,RGSV)\nPRG2=plt.scatter(RGP,RGHDSV)\nplt.legend([PRG1,PRG2],['SV%','HDSV%'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('SV and HDSV Percentages')\nplt.title('Rookie Goalies and The Save They Make')\nplt.show()\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(EXRRPRS,RGOL,color='purple')\nax1.scatter(EXRRPRS,RTAS)\nax1.legend(['Goals','Total Assists'])\nax1.title.set_text('Rookie Goals and Assists')\n\nax2.scatter(EXRRPRS,RTAW,color='red')\nax2.scatter(EXRRPRS,RGAW,color='black')\nax2.scatter(EXRRPRS,RSB,color='green')\nax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')\nax2.legend(['Takeaways','Giveaways','Shots Blocked'])\nplt.show()\nNow that all of the previously generated visualiztions are here, it’s time to get a new one added to the mix. Essentially it’ll be just like the Rookie Goals and Assists set of visualizations but for the more seasoned skaters. TOI will be divided by 100 seconds to properly scale it and discreitze it so it can be more easily visualized.\nDFSIT = pd.read_csv(\"SkaterOnIcestats.csv\")\nDFSITFilter=DFSIT[DFSIT['CF']&gt;1550]\nPDOSOrder=DFSITFilter.sort_values(by=['PDO'],ascending=[0])\nSCFOrder=PDOSOrder.sort_values(by=['CF%'],ascending=[0])\nPDOSV=PDOSOrder.loc[:,'PDO']\nSCFV=SCFOrder.loc[:,'CF%']/100\nSGOL=PDOSOrder.loc[:,'GF%']\nSTAS=DFSITFilter.loc[:,'FA']\nSTAHDG=DFSITFilter.loc[:,'HDGF%']\nSGAW=DFSITFilter.loc[:,'GA']\nSSB=DFSITFilter.loc[:,'On-Ice SV%']\nSTOI=DFSITFilter.loc[:,'TOI']/100\nSPRS=PDOSOrder.loc[:,'Player']\nEXSRPRS=DFSITFilter.loc[:,'Player']\nOSP=pd.DataFrame(DFSITFilter['Player'])\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(SPRS,PDOSV,color='purple')\nax1.scatter(SPRS,SCFV)\nax1.legend(['Goals','high Danger Goals'])\nax1.title.set_text('PDO and CF')\n\nax2.scatter(EXSRPRS,SSB,color='red')\nax2.scatter(EXSRPRS,STAHDG,color='black')\nax2.scatter(EXSRPRS,STOI,color='green')\nax2.title.set_text('On-Ice SV%, HDGF%, and TOI')\nax2.legend(['On-Ice SV%','HDGF%','TOI (x100)'])\nplt.show()\n\n\nNow it comes time to make my picks for the Hart Memorial Trophy. The list is as follows:\n\n\n1) Connor Hellbuyck\n\n\n2) Zach Weresnki\n\n\n3) Kirill Marchenko\n\n\n4) Dustin Wolf\n\n\n5) John Carlson\nLastly comes the Lady Byng trophy given to the athlete who displays the best sportsmanship and skills. Information related to skill is going to be pulled from the Hart Memorial Trophy visualizations above, but for sportsmanship the primary metrics being looked at will be penalties incurred by skaters.\nRPEN=pd.read_csv(\"RookieSkaterIndividual.csv\",usecols=['Player','TOI','PIM','Total Penalties','Minor','Major','Misconduct','Penalties Drawn'])\nSPEN=pd.read_csv(\"SkaterIndividualstats.csv\",usecols=['Player','TOI','PIM','Total Penalties','Minor','Major','Misconduct','Penalties Drawn'])\nSPEN.sort_values(by=['Major'],ascending=[1])\nSPENFilter=SPEN[SPEN['TOI']&gt;1400]\ndisplay(SPENFilter)\nSPPS=SPENFilter.loc[:,'Player']\nSPIM=SPENFilter.loc[:,'PIM']\nSTP=SPENFilter.loc[:,'Total Penalties']\nSMI=SPENFilter.loc[:,'Minor']\nSMJ=SPENFilter.loc[:,'Major']\nSMC=SPENFilter.loc[:,'Misconduct']\nSPD=SPENFilter.loc[:,'Penalties Drawn']\nSPENT=SPIM+STP+SMI+SMJ+SMC+SPD\nSPENT1=pd.DataFrame(SPENT)\nSPPS1=pd.DataFrame(SPPS)\nAG=pd.concat([SPENT,SPPS],ignore_index=[1])\nSPPS1['SPENT1']=SPENT1\nSPPS1.sort_values(by=['SPENT1'],ascending=[1])\nThe players with the best sportmanship will have the lowest SPENT1 values above. The problem is that there are tons of them with a score of 0. I then sorted by TOI with a minimum TOI of 1500 required. From here I looked at more seasoned players who were in the above nominations. These include Cale Makar, Erik Karlsson, John Carlson, and Zach Werenski. Next will come the rookies.\nRPENFilter=RPEN[RPEN['TOI']&gt;1000]\ndisplay(RPENFilter)\nRPPS=RPENFilter.loc[:,'Player']\nRPIM=RPENFilter.loc[:,'PIM']\nRTP=RPENFilter.loc[:,'Total Penalties']\nRMI=RPENFilter.loc[:,'Minor']\nRMJ=RPENFilter.loc[:,'Major']\nRMC=RPENFilter.loc[:,'Misconduct']\nRPD=RPENFilter.loc[:,'Penalties Drawn']\nRPENT=RPIM+RTP+RMI+RMJ+RMC+RPD\nRPENT1=pd.DataFrame(RPENT)\nRPPS1=pd.DataFrame(RPPS)\nRG=pd.concat([RPENT,RPPS],ignore_index=[1])\nRPPS1['RPENT1']=RPENT1\nRPPS1.sort_values(by=['RPENT1'],ascending=[1])\nCale=42\nErik=43\nJohn=43\nZach=68\nAlex=25\nWyatt=34\nKirill=41\nSome names seen previously include Alex Vlasic, Wyatt Johnston, and Kirill Marchenko. Next comes time to compare these players specifically. Interestingly enough the rookies have lower incursion scores which is the sum of major and minor penalties, penalties drawn, PIM, total penalties, and misconduct.\n\n\nMy list for the Lady Byng Trophy is as follows:\n\n\n1) Cale Makar\n\n\n2) Kirill Marchenko\n\n\n3) Alex Vlasic\n\n\n4) Erik Karlsson\n\n\n5) John Carlson"
  }
]