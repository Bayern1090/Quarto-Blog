{
  "hash": "1f4706bd83429f6cbb812c32780fa672",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Marks and Channels\"\nauthor: \"Ian\"\ncategories: [Marks and Channels]\nimage: \"HMM.png\"\ncode-fold: true\n---\n\n::: {#8ae7c145 .cell execution_count=1}\n``` {.python .cell-code}\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport statistics\nfrom matplotlib import cm\nimport csv\nimport tidypandas as tp\nDFGV=pd.read_csv(\"Goalies.csv\", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\n#print(DFGV)\nDFSIT = pd.read_csv(\"SkaterIndividualstats.csv\")\n#print(DFSIT)\nDFSOIS=pd.read_csv(\"SkaterOnIcestats.csv\")\n#print(DFG)\nDFRG=pd.read_csv(\"RookieGoalies.csv\")\n#print(DFRG)\nDFRSIT=pd.read_csv(\"RookieSkaterOnIce.csv\")\n#print(DFRSIT)\nDFRSOIS=pd.read_csv(\"RookieSkaterIndividual.csv\")\n#print(DFRSOIS)\n```\n:::\n\n\nLet's start with the Vezina trophy for the best goalie.\n\n::: {#ac3d4e93 .cell execution_count=2}\n``` {.python .cell-code}\nDFGV=pd.read_csv(\"Goalies.csv\", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\n```\n:::\n\n\nFirst I will filter out goalies who have fewer than 1000 saves\n\n::: {#0a875a36 .cell execution_count=3}\n``` {.python .cell-code}\nfiltered_DFGV = DFGV[DFGV['Saves'] >1000]\ndisplay(filtered_DFGV)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Jake Oettinger</td>\n      <td>44</td>\n      <td>2584.833333</td>\n      <td>1175</td>\n      <td>1070</td>\n      <td>0.911</td>\n      <td>288</td>\n      <td>228</td>\n      <td>0.792</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Jordan Binnington</td>\n      <td>43</td>\n      <td>2460.250000</td>\n      <td>1136</td>\n      <td>1021</td>\n      <td>0.899</td>\n      <td>275</td>\n      <td>221</td>\n      <td>0.804</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Sam Montembeault</td>\n      <td>46</td>\n      <td>2567.866667</td>\n      <td>1232</td>\n      <td>1108</td>\n      <td>0.899</td>\n      <td>357</td>\n      <td>293</td>\n      <td>0.821</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Juuse Saros</td>\n      <td>45</td>\n      <td>2598.666667</td>\n      <td>1252</td>\n      <td>1124</td>\n      <td>0.898</td>\n      <td>337</td>\n      <td>277</td>\n      <td>0.822</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Elvis Merzlikins</td>\n      <td>40</td>\n      <td>2408.183333</td>\n      <td>1154</td>\n      <td>1035</td>\n      <td>0.897</td>\n      <td>319</td>\n      <td>261</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>Jeremy Swayman</td>\n      <td>44</td>\n      <td>2600.733333</td>\n      <td>1247</td>\n      <td>1119</td>\n      <td>0.897</td>\n      <td>303</td>\n      <td>237</td>\n      <td>0.782</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>Ukko-Pekka Luukkonen</td>\n      <td>43</td>\n      <td>2448.783333</td>\n      <td>1163</td>\n      <td>1040</td>\n      <td>0.894</td>\n      <td>302</td>\n      <td>240</td>\n      <td>0.795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNext I'll sort by the High Danger Save Percentages\n\n::: {#9fa36507 .cell execution_count=4}\n``` {.python .cell-code}\nHDOrder=filtered_DFGV.sort_values(by=['HDSV%'], ascending=[0])\ndisplay(HDOrder)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Juuse Saros</td>\n      <td>45</td>\n      <td>2598.666667</td>\n      <td>1252</td>\n      <td>1124</td>\n      <td>0.898</td>\n      <td>337</td>\n      <td>277</td>\n      <td>0.822</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Sam Montembeault</td>\n      <td>46</td>\n      <td>2567.866667</td>\n      <td>1232</td>\n      <td>1108</td>\n      <td>0.899</td>\n      <td>357</td>\n      <td>293</td>\n      <td>0.821</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Elvis Merzlikins</td>\n      <td>40</td>\n      <td>2408.183333</td>\n      <td>1154</td>\n      <td>1035</td>\n      <td>0.897</td>\n      <td>319</td>\n      <td>261</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Jordan Binnington</td>\n      <td>43</td>\n      <td>2460.250000</td>\n      <td>1136</td>\n      <td>1021</td>\n      <td>0.899</td>\n      <td>275</td>\n      <td>221</td>\n      <td>0.804</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>Ukko-Pekka Luukkonen</td>\n      <td>43</td>\n      <td>2448.783333</td>\n      <td>1163</td>\n      <td>1040</td>\n      <td>0.894</td>\n      <td>302</td>\n      <td>240</td>\n      <td>0.795</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Jake Oettinger</td>\n      <td>44</td>\n      <td>2584.833333</td>\n      <td>1175</td>\n      <td>1070</td>\n      <td>0.911</td>\n      <td>288</td>\n      <td>228</td>\n      <td>0.792</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>Jeremy Swayman</td>\n      <td>44</td>\n      <td>2600.733333</td>\n      <td>1247</td>\n      <td>1119</td>\n      <td>0.897</td>\n      <td>303</td>\n      <td>237</td>\n      <td>0.782</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOne last order that I'm going to perform is to order goalies by save percentage before doing further filtering\n\n::: {#a41943dc .cell execution_count=5}\n``` {.python .cell-code}\nSVOrder=filtered_DFGV.sort_values(by=['SV%'], ascending=[0])\ndisplay(SVOrder)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Jake Oettinger</td>\n      <td>44</td>\n      <td>2584.833333</td>\n      <td>1175</td>\n      <td>1070</td>\n      <td>0.911</td>\n      <td>288</td>\n      <td>228</td>\n      <td>0.792</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Jordan Binnington</td>\n      <td>43</td>\n      <td>2460.250000</td>\n      <td>1136</td>\n      <td>1021</td>\n      <td>0.899</td>\n      <td>275</td>\n      <td>221</td>\n      <td>0.804</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Sam Montembeault</td>\n      <td>46</td>\n      <td>2567.866667</td>\n      <td>1232</td>\n      <td>1108</td>\n      <td>0.899</td>\n      <td>357</td>\n      <td>293</td>\n      <td>0.821</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Juuse Saros</td>\n      <td>45</td>\n      <td>2598.666667</td>\n      <td>1252</td>\n      <td>1124</td>\n      <td>0.898</td>\n      <td>337</td>\n      <td>277</td>\n      <td>0.822</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Elvis Merzlikins</td>\n      <td>40</td>\n      <td>2408.183333</td>\n      <td>1154</td>\n      <td>1035</td>\n      <td>0.897</td>\n      <td>319</td>\n      <td>261</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>Jeremy Swayman</td>\n      <td>44</td>\n      <td>2600.733333</td>\n      <td>1247</td>\n      <td>1119</td>\n      <td>0.897</td>\n      <td>303</td>\n      <td>237</td>\n      <td>0.782</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>Ukko-Pekka Luukkonen</td>\n      <td>43</td>\n      <td>2448.783333</td>\n      <td>1163</td>\n      <td>1040</td>\n      <td>0.894</td>\n      <td>302</td>\n      <td>240</td>\n      <td>0.795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow I'm going to run another filter on the data. This time I will set a filter that clears out anyone who has a High Danger Save Percentage lower than 80%.\n\n::: {#089bb56b .cell execution_count=6}\n``` {.python .cell-code}\nHDSVFilter=filtered_DFGV[filtered_DFGV['HDSV%']>0.8]\ndisplay(HDSVFilter)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Jordan Binnington</td>\n      <td>43</td>\n      <td>2460.250000</td>\n      <td>1136</td>\n      <td>1021</td>\n      <td>0.899</td>\n      <td>275</td>\n      <td>221</td>\n      <td>0.804</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Sam Montembeault</td>\n      <td>46</td>\n      <td>2567.866667</td>\n      <td>1232</td>\n      <td>1108</td>\n      <td>0.899</td>\n      <td>357</td>\n      <td>293</td>\n      <td>0.821</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Juuse Saros</td>\n      <td>45</td>\n      <td>2598.666667</td>\n      <td>1252</td>\n      <td>1124</td>\n      <td>0.898</td>\n      <td>337</td>\n      <td>277</td>\n      <td>0.822</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Elvis Merzlikins</td>\n      <td>40</td>\n      <td>2408.183333</td>\n      <td>1154</td>\n      <td>1035</td>\n      <td>0.897</td>\n      <td>319</td>\n      <td>261</td>\n      <td>0.818</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNext is a second filter to filter out those who have a saver percentage beneath 90%.\n\n::: {#86a14b37 .cell execution_count=7}\n``` {.python .cell-code}\nSVFilter=HDSVFilter[HDSVFilter['SV%']>0.9]\ndisplay(SVFilter)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe next two reorderings will be first by HDSV percentage and then by SV percentage\n\n::: {#00b67322 .cell execution_count=8}\n``` {.python .cell-code}\nHDSVF=SVFilter.sort_values(by=['HDSV%'], ascending=[0])\ndisplay(HDSVF)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e1ea326e .cell execution_count=9}\n``` {.python .cell-code}\nSVFF=SVFilter.sort_values(by=['SV%'], ascending=[0])\ndisplay(SVFF)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Connor Hellebuyck</td>\n      <td>46</td>\n      <td>2771.733333</td>\n      <td>1262</td>\n      <td>1170</td>\n      <td>0.927</td>\n      <td>293</td>\n      <td>253</td>\n      <td>0.863</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Andrei Vasilevskiy</td>\n      <td>48</td>\n      <td>2837.050000</td>\n      <td>1335</td>\n      <td>1232</td>\n      <td>0.923</td>\n      <td>317</td>\n      <td>271</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mackenzie Blackwood</td>\n      <td>44</td>\n      <td>2504.983333</td>\n      <td>1229</td>\n      <td>1125</td>\n      <td>0.915</td>\n      <td>309</td>\n      <td>260</td>\n      <td>0.841</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Filip Gustavsson</td>\n      <td>40</td>\n      <td>2348.033333</td>\n      <td>1190</td>\n      <td>1088</td>\n      <td>0.914</td>\n      <td>274</td>\n      <td>229</td>\n      <td>0.836</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Joey Daccord</td>\n      <td>41</td>\n      <td>2365.866667</td>\n      <td>1167</td>\n      <td>1066</td>\n      <td>0.913</td>\n      <td>285</td>\n      <td>233</td>\n      <td>0.818</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Igor Shesterkin</td>\n      <td>44</td>\n      <td>2493.083333</td>\n      <td>1263</td>\n      <td>1144</td>\n      <td>0.906</td>\n      <td>358</td>\n      <td>295</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Ilya Sorokin</td>\n      <td>45</td>\n      <td>2575.083333</td>\n      <td>1237</td>\n      <td>1117</td>\n      <td>0.903</td>\n      <td>322</td>\n      <td>264</td>\n      <td>0.820</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b5e4f7e0 .cell execution_count=10}\n``` {.python .cell-code}\nSAL=SVFilter.sort_values(by=['Shots Against'], ascending=[0])\n```\n:::\n\n\nFirstly, I will plot players and their total number of shots against.\n\n::: {#59d9241d .cell execution_count=11}\n``` {.python .cell-code}\nplt.scatter(SAL['Player'],SAL['Shots Against'])\nplt.xticks(SAL['Player'],rotation=90)\nplt.ylabel('Shots Against')\nplt.title('Players and The Shots Against Them')\nplt.show\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-12-output-1.png){width=602 height=564}\n:::\n:::\n\n\nNext I will plot players and their save percentages and high danger save percentages.\n\n::: {#ce295d40 .cell execution_count=12}\n``` {.python .cell-code}\nHDSVLL=SVFF.loc[:,'HDSV%']\nSVFFL=SVFF.loc[:,'SV%']\nGP=SVFF.loc[:,'Player']\nP1=plt.scatter(GP,HDSVLL)\nP2=plt.scatter(GP,SVFFL)\nplt.xticks(GP,rotation=90)\nplt.legend([P1,P2],['HDSV%','SV%'])\nplt.title('Players and Their Save and High Danger Save Percentages')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-13-output-1.png){width=579 height=564}\n:::\n:::\n\n\n# From these plots and the tables generated in filtering and ordering the data I will create my ticket for the Vezina Trophy.\n# My ticket is as follows:\n# 1) Connor Hellebuyck\n# 2) Andrei Vasilevskiy\n# 3) Igor Shesterkin\n# 4) Mackenzie Blackwood\n# 5) Filip Gustavsson\n\nThe next trophy is the James Norris Memorial trophy for the best overall defenseman for the position.\n\nThe first thing I plan to do is run a filter on the data. For defesnsive players and other pertinent information like GP, TOI, CF, CA, CF% and PDO as metrics for their performance.\n\n::: {#74333c1a .cell execution_count=13}\n``` {.python .cell-code}\nDFRSOIS=pd.read_csv(\"SkaterOnIcestats.csv\",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])\nDFilter=DFRSOIS.sort_values(by=['Position'])\nD=DFilter[DFilter['Position']=='D']\ndisplay(D)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>Position</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>CF</th>\n      <th>CA</th>\n      <th>CF%</th>\n      <th>PDO</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>820</th>\n      <td>Jamie Oleksiak</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1157.750000</td>\n      <td>927</td>\n      <td>1500</td>\n      <td>38.20</td>\n      <td>0.990</td>\n    </tr>\n    <tr>\n      <th>543</th>\n      <td>Rasmus Andersson</td>\n      <td>D</td>\n      <td>60</td>\n      <td>1447.283333</td>\n      <td>1471</td>\n      <td>1673</td>\n      <td>46.79</td>\n      <td>0.961</td>\n    </tr>\n    <tr>\n      <th>560</th>\n      <td>Damon Severson</td>\n      <td>D</td>\n      <td>57</td>\n      <td>1122.416667</td>\n      <td>1007</td>\n      <td>1161</td>\n      <td>46.45</td>\n      <td>1.000</td>\n    </tr>\n    <tr>\n      <th>559</th>\n      <td>David Jiricek</td>\n      <td>D</td>\n      <td>12</td>\n      <td>145.416667</td>\n      <td>125</td>\n      <td>144</td>\n      <td>46.47</td>\n      <td>1.017</td>\n    </tr>\n    <tr>\n      <th>545</th>\n      <td>Dante Fabbro</td>\n      <td>D</td>\n      <td>47</td>\n      <td>971.250000</td>\n      <td>944</td>\n      <td>1075</td>\n      <td>46.76</td>\n      <td>0.999</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>370</th>\n      <td>Rasmus Sandin</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1162.483333</td>\n      <td>1114</td>\n      <td>1076</td>\n      <td>50.87</td>\n      <td>1.028</td>\n    </tr>\n    <tr>\n      <th>372</th>\n      <td>Noah Hanifin</td>\n      <td>D</td>\n      <td>60</td>\n      <td>1278.133333</td>\n      <td>1309</td>\n      <td>1265</td>\n      <td>50.85</td>\n      <td>0.974</td>\n    </tr>\n    <tr>\n      <th>457</th>\n      <td>Neal Pionk</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1355.500000</td>\n      <td>1316</td>\n      <td>1377</td>\n      <td>48.87</td>\n      <td>1.031</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Samuel Bolduc</td>\n      <td>D</td>\n      <td>1</td>\n      <td>5.933333</td>\n      <td>7</td>\n      <td>2</td>\n      <td>77.78</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>459</th>\n      <td>Keaton Middleton</td>\n      <td>D</td>\n      <td>28</td>\n      <td>301.166667</td>\n      <td>253</td>\n      <td>265</td>\n      <td>48.84</td>\n      <td>1.004</td>\n    </tr>\n  </tbody>\n</table>\n<p>299 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\nNext I will run a series of filters to filter for time on the ice and games played.\n\n::: {#0af62809 .cell execution_count=14}\n``` {.python .cell-code}\nDPFilter=D[D['GP']>60]\nTOIDFilter=DPFilter[DPFilter['TOI']>1300]\ndisplay(TOIDFilter)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>Position</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>CF</th>\n      <th>CA</th>\n      <th>CF%</th>\n      <th>PDO</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>659</th>\n      <td>Dylan DeMelo</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1313.350000</td>\n      <td>1112</td>\n      <td>1411</td>\n      <td>44.07</td>\n      <td>1.033</td>\n    </tr>\n    <tr>\n      <th>633</th>\n      <td>Colton Parayko</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1455.716667</td>\n      <td>1222</td>\n      <td>1527</td>\n      <td>44.45</td>\n      <td>0.994</td>\n    </tr>\n    <tr>\n      <th>813</th>\n      <td>Cody Ceci</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1362.033333</td>\n      <td>1081</td>\n      <td>1723</td>\n      <td>38.55</td>\n      <td>0.999</td>\n    </tr>\n    <tr>\n      <th>758</th>\n      <td>Alex Vlasic</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1444.850000</td>\n      <td>1093</td>\n      <td>1564</td>\n      <td>41.14</td>\n      <td>1.008</td>\n    </tr>\n    <tr>\n      <th>761</th>\n      <td>Mario Ferraro</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1302.216667</td>\n      <td>1083</td>\n      <td>1567</td>\n      <td>40.87</td>\n      <td>0.966</td>\n    </tr>\n    <tr>\n      <th>611</th>\n      <td>Travis Sanheim</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1496.050000</td>\n      <td>1303</td>\n      <td>1588</td>\n      <td>45.07</td>\n      <td>0.984</td>\n    </tr>\n    <tr>\n      <th>285</th>\n      <td>Jaccob Slavin</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1323.950000</td>\n      <td>1411</td>\n      <td>1272</td>\n      <td>52.59</td>\n      <td>0.990</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>Morgan Rielly</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1315.700000</td>\n      <td>1416</td>\n      <td>1258</td>\n      <td>52.95</td>\n      <td>0.998</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Erik Karlsson</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1466.800000</td>\n      <td>1745</td>\n      <td>1407</td>\n      <td>55.36</td>\n      <td>0.979</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>Brent Burns</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1302.533333</td>\n      <td>1533</td>\n      <td>1214</td>\n      <td>55.81</td>\n      <td>0.973</td>\n    </tr>\n    <tr>\n      <th>127</th>\n      <td>Cale Makar</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1574.800000</td>\n      <td>1853</td>\n      <td>1411</td>\n      <td>56.77</td>\n      <td>1.011</td>\n    </tr>\n    <tr>\n      <th>229</th>\n      <td>John Carlson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1452.316667</td>\n      <td>1612</td>\n      <td>1384</td>\n      <td>53.81</td>\n      <td>1.020</td>\n    </tr>\n    <tr>\n      <th>209</th>\n      <td>Lane Hutson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1365.283333</td>\n      <td>1487</td>\n      <td>1249</td>\n      <td>54.35</td>\n      <td>0.992</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>Gustav Forsling</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1418.650000</td>\n      <td>1467</td>\n      <td>1464</td>\n      <td>50.05</td>\n      <td>1.009</td>\n    </tr>\n    <tr>\n      <th>457</th>\n      <td>Neal Pionk</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1355.500000</td>\n      <td>1316</td>\n      <td>1377</td>\n      <td>48.87</td>\n      <td>1.031</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nI will reorder based on the total time on the ice that players are getting.\n\n::: {#5fa75170 .cell execution_count=15}\n``` {.python .cell-code}\nTOIDOrder=TOIDFilter.sort_values(by=['TOI'],ascending=[0])\ndisplay(TOIDOrder)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>Position</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>CF</th>\n      <th>CA</th>\n      <th>CF%</th>\n      <th>PDO</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>127</th>\n      <td>Cale Makar</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1574.800000</td>\n      <td>1853</td>\n      <td>1411</td>\n      <td>56.77</td>\n      <td>1.011</td>\n    </tr>\n    <tr>\n      <th>611</th>\n      <td>Travis Sanheim</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1496.050000</td>\n      <td>1303</td>\n      <td>1588</td>\n      <td>45.07</td>\n      <td>0.984</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Erik Karlsson</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1466.800000</td>\n      <td>1745</td>\n      <td>1407</td>\n      <td>55.36</td>\n      <td>0.979</td>\n    </tr>\n    <tr>\n      <th>633</th>\n      <td>Colton Parayko</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1455.716667</td>\n      <td>1222</td>\n      <td>1527</td>\n      <td>44.45</td>\n      <td>0.994</td>\n    </tr>\n    <tr>\n      <th>229</th>\n      <td>John Carlson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1452.316667</td>\n      <td>1612</td>\n      <td>1384</td>\n      <td>53.81</td>\n      <td>1.020</td>\n    </tr>\n    <tr>\n      <th>758</th>\n      <td>Alex Vlasic</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1444.850000</td>\n      <td>1093</td>\n      <td>1564</td>\n      <td>41.14</td>\n      <td>1.008</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>Gustav Forsling</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1418.650000</td>\n      <td>1467</td>\n      <td>1464</td>\n      <td>50.05</td>\n      <td>1.009</td>\n    </tr>\n    <tr>\n      <th>209</th>\n      <td>Lane Hutson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1365.283333</td>\n      <td>1487</td>\n      <td>1249</td>\n      <td>54.35</td>\n      <td>0.992</td>\n    </tr>\n    <tr>\n      <th>813</th>\n      <td>Cody Ceci</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1362.033333</td>\n      <td>1081</td>\n      <td>1723</td>\n      <td>38.55</td>\n      <td>0.999</td>\n    </tr>\n    <tr>\n      <th>457</th>\n      <td>Neal Pionk</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1355.500000</td>\n      <td>1316</td>\n      <td>1377</td>\n      <td>48.87</td>\n      <td>1.031</td>\n    </tr>\n    <tr>\n      <th>285</th>\n      <td>Jaccob Slavin</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1323.950000</td>\n      <td>1411</td>\n      <td>1272</td>\n      <td>52.59</td>\n      <td>0.990</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>Morgan Rielly</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1315.700000</td>\n      <td>1416</td>\n      <td>1258</td>\n      <td>52.95</td>\n      <td>0.998</td>\n    </tr>\n    <tr>\n      <th>659</th>\n      <td>Dylan DeMelo</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1313.350000</td>\n      <td>1112</td>\n      <td>1411</td>\n      <td>44.07</td>\n      <td>1.033</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>Brent Burns</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1302.533333</td>\n      <td>1533</td>\n      <td>1214</td>\n      <td>55.81</td>\n      <td>0.973</td>\n    </tr>\n    <tr>\n      <th>761</th>\n      <td>Mario Ferraro</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1302.216667</td>\n      <td>1083</td>\n      <td>1567</td>\n      <td>40.87</td>\n      <td>0.966</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom here I can see that CF and CA values don't directly correlate with time on the ice. From here I will reorder based on the CF% as a value greater than 55% is considered to be the best of the best.\n\n::: {#8d85dac0 .cell execution_count=16}\n``` {.python .cell-code}\nCFOrder=TOIDOrder.sort_values(by=['CF%'],ascending=[0])\ndisplay(CFOrder)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>Position</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>CF</th>\n      <th>CA</th>\n      <th>CF%</th>\n      <th>PDO</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>127</th>\n      <td>Cale Makar</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1574.800000</td>\n      <td>1853</td>\n      <td>1411</td>\n      <td>56.77</td>\n      <td>1.011</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>Brent Burns</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1302.533333</td>\n      <td>1533</td>\n      <td>1214</td>\n      <td>55.81</td>\n      <td>0.973</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Erik Karlsson</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1466.800000</td>\n      <td>1745</td>\n      <td>1407</td>\n      <td>55.36</td>\n      <td>0.979</td>\n    </tr>\n    <tr>\n      <th>209</th>\n      <td>Lane Hutson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1365.283333</td>\n      <td>1487</td>\n      <td>1249</td>\n      <td>54.35</td>\n      <td>0.992</td>\n    </tr>\n    <tr>\n      <th>229</th>\n      <td>John Carlson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1452.316667</td>\n      <td>1612</td>\n      <td>1384</td>\n      <td>53.81</td>\n      <td>1.020</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>Morgan Rielly</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1315.700000</td>\n      <td>1416</td>\n      <td>1258</td>\n      <td>52.95</td>\n      <td>0.998</td>\n    </tr>\n    <tr>\n      <th>285</th>\n      <td>Jaccob Slavin</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1323.950000</td>\n      <td>1411</td>\n      <td>1272</td>\n      <td>52.59</td>\n      <td>0.990</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>Gustav Forsling</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1418.650000</td>\n      <td>1467</td>\n      <td>1464</td>\n      <td>50.05</td>\n      <td>1.009</td>\n    </tr>\n    <tr>\n      <th>457</th>\n      <td>Neal Pionk</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1355.500000</td>\n      <td>1316</td>\n      <td>1377</td>\n      <td>48.87</td>\n      <td>1.031</td>\n    </tr>\n    <tr>\n      <th>611</th>\n      <td>Travis Sanheim</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1496.050000</td>\n      <td>1303</td>\n      <td>1588</td>\n      <td>45.07</td>\n      <td>0.984</td>\n    </tr>\n    <tr>\n      <th>633</th>\n      <td>Colton Parayko</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1455.716667</td>\n      <td>1222</td>\n      <td>1527</td>\n      <td>44.45</td>\n      <td>0.994</td>\n    </tr>\n    <tr>\n      <th>659</th>\n      <td>Dylan DeMelo</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1313.350000</td>\n      <td>1112</td>\n      <td>1411</td>\n      <td>44.07</td>\n      <td>1.033</td>\n    </tr>\n    <tr>\n      <th>758</th>\n      <td>Alex Vlasic</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1444.850000</td>\n      <td>1093</td>\n      <td>1564</td>\n      <td>41.14</td>\n      <td>1.008</td>\n    </tr>\n    <tr>\n      <th>761</th>\n      <td>Mario Ferraro</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1302.216667</td>\n      <td>1083</td>\n      <td>1567</td>\n      <td>40.87</td>\n      <td>0.966</td>\n    </tr>\n    <tr>\n      <th>813</th>\n      <td>Cody Ceci</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1362.033333</td>\n      <td>1081</td>\n      <td>1723</td>\n      <td>38.55</td>\n      <td>0.999</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#9da7f828 .cell execution_count=17}\n``` {.python .cell-code}\nCF=CFOrder.loc[:,'CF']\nTOID=CFOrder.loc[:,'TOI']\nDP=CFOrder.loc[:,'Player']\nGames=CFOrder.loc[:'GP']\nplt.scatter(TOIDOrder['Player'],TOIDOrder['TOI'])\nplt.xticks(TOIDOrder['Player'],rotation=90)\nplt.ylabel('TIO(seconds)')\nplt.title('Players and Their Time on the Ice')\nplt.show\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-18-output-1.png){width=602 height=522}\n:::\n:::\n\n\nOne final reordering will be based on PDO values as a value greater than one means that players are playing better than expected.\n\n::: {#1affaeca .cell execution_count=18}\n``` {.python .cell-code}\nPDOrder=TOIDOrder.sort_values(by=['PDO'],ascending=[0])\nPDOD=PDOrder.loc[:,'PDO']\ndisplay(PDOrder)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>Position</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>CF</th>\n      <th>CA</th>\n      <th>CF%</th>\n      <th>PDO</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>659</th>\n      <td>Dylan DeMelo</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1313.350000</td>\n      <td>1112</td>\n      <td>1411</td>\n      <td>44.07</td>\n      <td>1.033</td>\n    </tr>\n    <tr>\n      <th>457</th>\n      <td>Neal Pionk</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1355.500000</td>\n      <td>1316</td>\n      <td>1377</td>\n      <td>48.87</td>\n      <td>1.031</td>\n    </tr>\n    <tr>\n      <th>229</th>\n      <td>John Carlson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1452.316667</td>\n      <td>1612</td>\n      <td>1384</td>\n      <td>53.81</td>\n      <td>1.020</td>\n    </tr>\n    <tr>\n      <th>127</th>\n      <td>Cale Makar</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1574.800000</td>\n      <td>1853</td>\n      <td>1411</td>\n      <td>56.77</td>\n      <td>1.011</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>Gustav Forsling</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1418.650000</td>\n      <td>1467</td>\n      <td>1464</td>\n      <td>50.05</td>\n      <td>1.009</td>\n    </tr>\n    <tr>\n      <th>758</th>\n      <td>Alex Vlasic</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1444.850000</td>\n      <td>1093</td>\n      <td>1564</td>\n      <td>41.14</td>\n      <td>1.008</td>\n    </tr>\n    <tr>\n      <th>813</th>\n      <td>Cody Ceci</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1362.033333</td>\n      <td>1081</td>\n      <td>1723</td>\n      <td>38.55</td>\n      <td>0.999</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>Morgan Rielly</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1315.700000</td>\n      <td>1416</td>\n      <td>1258</td>\n      <td>52.95</td>\n      <td>0.998</td>\n    </tr>\n    <tr>\n      <th>633</th>\n      <td>Colton Parayko</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1455.716667</td>\n      <td>1222</td>\n      <td>1527</td>\n      <td>44.45</td>\n      <td>0.994</td>\n    </tr>\n    <tr>\n      <th>209</th>\n      <td>Lane Hutson</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1365.283333</td>\n      <td>1487</td>\n      <td>1249</td>\n      <td>54.35</td>\n      <td>0.992</td>\n    </tr>\n    <tr>\n      <th>285</th>\n      <td>Jaccob Slavin</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1323.950000</td>\n      <td>1411</td>\n      <td>1272</td>\n      <td>52.59</td>\n      <td>0.990</td>\n    </tr>\n    <tr>\n      <th>611</th>\n      <td>Travis Sanheim</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1496.050000</td>\n      <td>1303</td>\n      <td>1588</td>\n      <td>45.07</td>\n      <td>0.984</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Erik Karlsson</td>\n      <td>D</td>\n      <td>63</td>\n      <td>1466.800000</td>\n      <td>1745</td>\n      <td>1407</td>\n      <td>55.36</td>\n      <td>0.979</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>Brent Burns</td>\n      <td>D</td>\n      <td>61</td>\n      <td>1302.533333</td>\n      <td>1533</td>\n      <td>1214</td>\n      <td>55.81</td>\n      <td>0.973</td>\n    </tr>\n    <tr>\n      <th>761</th>\n      <td>Mario Ferraro</td>\n      <td>D</td>\n      <td>62</td>\n      <td>1302.216667</td>\n      <td>1083</td>\n      <td>1567</td>\n      <td>40.87</td>\n      <td>0.966</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe following plot will plot players PDO values and their CF values which are their CF percentages divided by 100% to get them to a discrete decimal value scale. I also took the players' time on the ice and divided it by 1000 seconds to get a discrete value for how many seconds they spend on the ice with the basis being 1000 seconds.\n\n::: {#cc666622 .cell execution_count=19}\n``` {.python .cell-code}\nPD1=plt.scatter(DP,PDOD)\nPD2=plt.scatter(DP,PDOrder['CF%']/100)\nPD3=plt.scatter(DP,PDOrder['TOI']/1000)\nplt.xticks(PDOrder['Player'],rotation=90)\nplt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])\nplt.ylabel('PDO and discrete CF and TOI values')\nplt.title('Players and Their Important Stats')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-20-output-1.png){width=589 height=522}\n:::\n:::\n\n\n# Based on the above visualization my ticket for the James Norris Memorial Trophy is as follows:\n# 1) Lane Hutson\n# 2) Erik Karlsson\n# 3) John Carlson\n# 4) Alex Vlasic\n# 5) Brent Burns\n\nThe next trophy is going to be the Calder Memorial Trophy which goes to the best rookie in the league. I'm going to divide the data for rookies between goalies and non-goalies.\n\nFirst comes the rookie goalies. The data will be reordered to show who has had the most shots taken against them. Then the first filter will be applied. This will be based on games played.\n\n::: {#d1ea6287 .cell execution_count=20}\n``` {.python .cell-code}\nDFRG=pd.read_csv(\"RookieGoalies.csv\",usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\nDFRGFilter=DFRG[DFRG['GP']>25]\nDFRGSAO=DFRG.sort_values(by=['Shots Against'],ascending=[0])\ndisplay(DFRGSAO,DFRGFilter)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>16</th>\n      <td>Ukko-Pekka Luukkonen</td>\n      <td>43</td>\n      <td>2448.783333</td>\n      <td>1163</td>\n      <td>1040</td>\n      <td>0.894</td>\n      <td>302</td>\n      <td>240</td>\n      <td>0.795</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Stuart Skinner</td>\n      <td>40</td>\n      <td>2321.033333</td>\n      <td>1083</td>\n      <td>973</td>\n      <td>0.898</td>\n      <td>263</td>\n      <td>211</td>\n      <td>0.802</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Dustin Wolf</td>\n      <td>36</td>\n      <td>2164.833333</td>\n      <td>1073</td>\n      <td>980</td>\n      <td>0.913</td>\n      <td>278</td>\n      <td>235</td>\n      <td>0.845</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Logan Thompson</td>\n      <td>35</td>\n      <td>2096.033333</td>\n      <td>985</td>\n      <td>904</td>\n      <td>0.918</td>\n      <td>266</td>\n      <td>222</td>\n      <td>0.835</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Pyotr Kochetkov</td>\n      <td>37</td>\n      <td>2196.766667</td>\n      <td>926</td>\n      <td>835</td>\n      <td>0.902</td>\n      <td>297</td>\n      <td>254</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Joseph Woll</td>\n      <td>32</td>\n      <td>1886.366667</td>\n      <td>918</td>\n      <td>833</td>\n      <td>0.907</td>\n      <td>235</td>\n      <td>190</td>\n      <td>0.809</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Arvid Soderblom</td>\n      <td>29</td>\n      <td>1668.533333</td>\n      <td>895</td>\n      <td>811</td>\n      <td>0.906</td>\n      <td>247</td>\n      <td>199</td>\n      <td>0.806</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Samuel Ersson</td>\n      <td>34</td>\n      <td>1890.450000</td>\n      <td>836</td>\n      <td>747</td>\n      <td>0.894</td>\n      <td>196</td>\n      <td>159</td>\n      <td>0.811</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Dan Vladar</td>\n      <td>24</td>\n      <td>1447.983333</td>\n      <td>677</td>\n      <td>605</td>\n      <td>0.894</td>\n      <td>162</td>\n      <td>122</td>\n      <td>0.753</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Joel Hofer</td>\n      <td>23</td>\n      <td>1248.266667</td>\n      <td>603</td>\n      <td>542</td>\n      <td>0.899</td>\n      <td>120</td>\n      <td>92</td>\n      <td>0.767</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Justus Annunen</td>\n      <td>24</td>\n      <td>1234.300000</td>\n      <td>588</td>\n      <td>522</td>\n      <td>0.888</td>\n      <td>135</td>\n      <td>114</td>\n      <td>0.844</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Daniil Tarasov</td>\n      <td>15</td>\n      <td>905.016667</td>\n      <td>452</td>\n      <td>398</td>\n      <td>0.881</td>\n      <td>130</td>\n      <td>100</td>\n      <td>0.769</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Yaroslav Askarov</td>\n      <td>13</td>\n      <td>716.800000</td>\n      <td>357</td>\n      <td>320</td>\n      <td>0.896</td>\n      <td>102</td>\n      <td>84</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Leevi Merilainen</td>\n      <td>12</td>\n      <td>662.983333</td>\n      <td>295</td>\n      <td>273</td>\n      <td>0.925</td>\n      <td>62</td>\n      <td>50</td>\n      <td>0.806</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Devon Levi</td>\n      <td>9</td>\n      <td>480.633333</td>\n      <td>258</td>\n      <td>225</td>\n      <td>0.872</td>\n      <td>63</td>\n      <td>46</td>\n      <td>0.730</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Cayden Primeau</td>\n      <td>11</td>\n      <td>523.700000</td>\n      <td>250</td>\n      <td>209</td>\n      <td>0.836</td>\n      <td>77</td>\n      <td>60</td>\n      <td>0.779</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Arturs Silovs</td>\n      <td>9</td>\n      <td>482.516667</td>\n      <td>219</td>\n      <td>188</td>\n      <td>0.858</td>\n      <td>59</td>\n      <td>44</td>\n      <td>0.746</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Jet Greaves</td>\n      <td>5</td>\n      <td>301.633333</td>\n      <td>159</td>\n      <td>144</td>\n      <td>0.906</td>\n      <td>47</td>\n      <td>40</td>\n      <td>0.851</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Marcus Hogberg</td>\n      <td>7</td>\n      <td>332.016667</td>\n      <td>151</td>\n      <td>143</td>\n      <td>0.947</td>\n      <td>37</td>\n      <td>32</td>\n      <td>0.865</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Jaxson Stauber</td>\n      <td>4</td>\n      <td>242.416667</td>\n      <td>120</td>\n      <td>111</td>\n      <td>0.925</td>\n      <td>27</td>\n      <td>24</td>\n      <td>0.889</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nico Daws</td>\n      <td>5</td>\n      <td>204.683333</td>\n      <td>88</td>\n      <td>85</td>\n      <td>0.966</td>\n      <td>24</td>\n      <td>22</td>\n      <td>0.917</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Jesper Wallstedt</td>\n      <td>2</td>\n      <td>117.433333</td>\n      <td>51</td>\n      <td>43</td>\n      <td>0.843</td>\n      <td>11</td>\n      <td>8</td>\n      <td>0.727</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Mads Sogaard</td>\n      <td>2</td>\n      <td>91.550000</td>\n      <td>40</td>\n      <td>32</td>\n      <td>0.800</td>\n      <td>14</td>\n      <td>11</td>\n      <td>0.786</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Jakub Skarek</td>\n      <td>2</td>\n      <td>76.150000</td>\n      <td>39</td>\n      <td>34</td>\n      <td>0.872</td>\n      <td>10</td>\n      <td>6</td>\n      <td>0.600</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Trent Miner</td>\n      <td>2</td>\n      <td>91.633333</td>\n      <td>33</td>\n      <td>29</td>\n      <td>0.879</td>\n      <td>6</td>\n      <td>4</td>\n      <td>0.667</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Sebastian Cossa</td>\n      <td>1</td>\n      <td>45.000000</td>\n      <td>14</td>\n      <td>12</td>\n      <td>0.857</td>\n      <td>5</td>\n      <td>3</td>\n      <td>0.600</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Akira Schmid</td>\n      <td>1</td>\n      <td>33.416667</td>\n      <td>12</td>\n      <td>12</td>\n      <td>1.000</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1.000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>Logan Thompson</td>\n      <td>35</td>\n      <td>2096.033333</td>\n      <td>985</td>\n      <td>904</td>\n      <td>0.918</td>\n      <td>266</td>\n      <td>222</td>\n      <td>0.835</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Dustin Wolf</td>\n      <td>36</td>\n      <td>2164.833333</td>\n      <td>1073</td>\n      <td>980</td>\n      <td>0.913</td>\n      <td>278</td>\n      <td>235</td>\n      <td>0.845</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Joseph Woll</td>\n      <td>32</td>\n      <td>1886.366667</td>\n      <td>918</td>\n      <td>833</td>\n      <td>0.907</td>\n      <td>235</td>\n      <td>190</td>\n      <td>0.809</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Arvid Soderblom</td>\n      <td>29</td>\n      <td>1668.533333</td>\n      <td>895</td>\n      <td>811</td>\n      <td>0.906</td>\n      <td>247</td>\n      <td>199</td>\n      <td>0.806</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Pyotr Kochetkov</td>\n      <td>37</td>\n      <td>2196.766667</td>\n      <td>926</td>\n      <td>835</td>\n      <td>0.902</td>\n      <td>297</td>\n      <td>254</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Stuart Skinner</td>\n      <td>40</td>\n      <td>2321.033333</td>\n      <td>1083</td>\n      <td>973</td>\n      <td>0.898</td>\n      <td>263</td>\n      <td>211</td>\n      <td>0.802</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Ukko-Pekka Luukkonen</td>\n      <td>43</td>\n      <td>2448.783333</td>\n      <td>1163</td>\n      <td>1040</td>\n      <td>0.894</td>\n      <td>302</td>\n      <td>240</td>\n      <td>0.795</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Samuel Ersson</td>\n      <td>34</td>\n      <td>1890.450000</td>\n      <td>836</td>\n      <td>747</td>\n      <td>0.894</td>\n      <td>196</td>\n      <td>159</td>\n      <td>0.811</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#81a093f0 .cell execution_count=21}\n``` {.python .cell-code}\nRGSV=DFRGFilter.loc[:,'SV%']\nRGHDSV=DFRGFilter.loc[:,'HDSV%']\nRGP=DFRGFilter.loc[:,'Player']\nPRG1=plt.scatter(RGP,RGSV)\nPRG2=plt.scatter(RGP,RGHDSV)\nplt.legend([PRG1,PRG2],['SV%','HDSV%'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('SV and HDSV Percentages')\nplt.title('Rookie Goalies and The Save They Make')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-22-output-1.png){width=597 height=571}\n:::\n:::\n\n\n::: {#1a771a33 .cell execution_count=22}\n``` {.python .cell-code}\nRGSAT=DFRGFilter.sort_values(by=['Shots Against'],ascending=[0])\ndisplay(RGSAT)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>GP</th>\n      <th>TOI</th>\n      <th>Shots Against</th>\n      <th>Saves</th>\n      <th>SV%</th>\n      <th>HD Shots Against</th>\n      <th>HD Saves</th>\n      <th>HDSV%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>16</th>\n      <td>Ukko-Pekka Luukkonen</td>\n      <td>43</td>\n      <td>2448.783333</td>\n      <td>1163</td>\n      <td>1040</td>\n      <td>0.894</td>\n      <td>302</td>\n      <td>240</td>\n      <td>0.795</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Lukas Dostal</td>\n      <td>36</td>\n      <td>2067.983333</td>\n      <td>1111</td>\n      <td>1011</td>\n      <td>0.910</td>\n      <td>305</td>\n      <td>249</td>\n      <td>0.816</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Stuart Skinner</td>\n      <td>40</td>\n      <td>2321.033333</td>\n      <td>1083</td>\n      <td>973</td>\n      <td>0.898</td>\n      <td>263</td>\n      <td>211</td>\n      <td>0.802</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Dustin Wolf</td>\n      <td>36</td>\n      <td>2164.833333</td>\n      <td>1073</td>\n      <td>980</td>\n      <td>0.913</td>\n      <td>278</td>\n      <td>235</td>\n      <td>0.845</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Logan Thompson</td>\n      <td>35</td>\n      <td>2096.033333</td>\n      <td>985</td>\n      <td>904</td>\n      <td>0.918</td>\n      <td>266</td>\n      <td>222</td>\n      <td>0.835</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Pyotr Kochetkov</td>\n      <td>37</td>\n      <td>2196.766667</td>\n      <td>926</td>\n      <td>835</td>\n      <td>0.902</td>\n      <td>297</td>\n      <td>254</td>\n      <td>0.855</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Joseph Woll</td>\n      <td>32</td>\n      <td>1886.366667</td>\n      <td>918</td>\n      <td>833</td>\n      <td>0.907</td>\n      <td>235</td>\n      <td>190</td>\n      <td>0.809</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Arvid Soderblom</td>\n      <td>29</td>\n      <td>1668.533333</td>\n      <td>895</td>\n      <td>811</td>\n      <td>0.906</td>\n      <td>247</td>\n      <td>199</td>\n      <td>0.806</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Samuel Ersson</td>\n      <td>34</td>\n      <td>1890.450000</td>\n      <td>836</td>\n      <td>747</td>\n      <td>0.894</td>\n      <td>196</td>\n      <td>159</td>\n      <td>0.811</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#496e4753 .cell execution_count=23}\n``` {.python .cell-code}\nplt.scatter(RGP,RGSAT['Shots Against'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('Shots Against')\nplt.title('Rookie Goalies and the shots taken against them')\nplt.show\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-24-output-1.png){width=602 height=571}\n:::\n:::\n\n\n# Before moving on to other rookies I want to list my top five rookie goalies who I will consider for the Calder Memorial Trophy in conjunction with all other rookies.\n# The list is as follows:\n# 1) Dustin Wolf\n# 2) Logan Thompson\n# 3) Lukas Dostal\n# 4) Pyotr Kochetkov\n# 5) Joseph Woll\n\nFor the rest of the rookies I will initially pull all the data and filter them out by having a minimum CF value of 1100 and a minimum time on the ice of 1100 seconds. I'll then reorder the rookie skater on ice data by PDO and CF% values in descending order. Afterward I will scale the CF% by dividing them by 100 to get them on the same scale as the PDO values and plot them against each other.\n\n::: {#89f2f4ff .cell execution_count=24}\n``` {.python .cell-code}\nDFRSIT=pd.read_csv(\"RookieSkaterOnIce.csv\")\nDFRSOIS=pd.read_csv(\"RookieSkaterIndividual.csv\")\nDFRSITFilter=DFRSIT[DFRSIT['CF']>1100]\nDFRSOISFilter=DFRSOIS[DFRSOIS['TOI']>1050]\nPDOROrder=DFRSITFilter.sort_values(by=['PDO'],ascending=[0])\nRCFOrder=PDOROrder.sort_values(by=['CF%'],ascending=[0])\nPDORV=PDOROrder.loc[:,'PDO']\nRCFV=RCFOrder.loc[:,'CF%']\nRGOL=DFRSOISFilter.loc[:,'Goals']\nRTAS=DFRSOISFilter.loc[:,'Total Assists']\nRTAW=DFRSOISFilter.loc[:,'Takeaways']\nRGAW=DFRSOISFilter.loc[:,'Giveaways']\nRSB=DFRSOISFilter.loc[:,'Shots Blocked']\nRTOI=DFRSOISFilter.loc[:,'TOI']\nRPRS=PDOROrder.loc[:,'Player']\nEXR=RGOL+RTAS+RTAW+RSB-RGAW\nEXRRPRS=DFRSOISFilter.loc[:,'Player']\nORP=pd.DataFrame(DFRSOISFilter['Player'])\nOP=pd.DataFrame(EXR)\npd.concat([EXR,ORP],ignore_index=[1])\nORP['EXR']=EXR\nORP['RTOI']=RTOI\nNORP=ORP.sort_values(by=['EXR'],ascending=[0])\ndisplay(NORP)\nRPS1=plt.scatter(RPRS,PDORV)\nRPS2=plt.scatter(RPRS,RCFV/100)\nplt.xticks(RPRS,rotation=90)\nplt.legend([RPS1,RPS2],['PDO','CF%'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>EXR</th>\n      <th>RTOI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>Jake Sanderson</td>\n      <td>142</td>\n      <td>1447.350000</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Alex Vlasic</td>\n      <td>106</td>\n      <td>1444.850000</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Jackson LaCombe</td>\n      <td>92</td>\n      <td>1104.983333</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Owen Power</td>\n      <td>92</td>\n      <td>1304.666667</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Wyatt Johnston</td>\n      <td>74</td>\n      <td>1147.883333</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Fabian Zetterlund</td>\n      <td>72</td>\n      <td>1051.466667</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Simon Edvinsson</td>\n      <td>71</td>\n      <td>1169.200000</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Ryker Evans</td>\n      <td>57</td>\n      <td>1074.066667</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Matty Beniers</td>\n      <td>56</td>\n      <td>1131.600000</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Kirill Marchenko</td>\n      <td>53</td>\n      <td>1071.616667</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Marco Rossi</td>\n      <td>51</td>\n      <td>1117.233333</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>Johnathan Kovacevic</td>\n      <td>46</td>\n      <td>1218.133333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Matthew Knies</td>\n      <td>46</td>\n      <td>1051.133333</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Brock Faber</td>\n      <td>42</td>\n      <td>1430.333333</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Luke Hughes</td>\n      <td>40</td>\n      <td>1084.366667</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>William Eklund</td>\n      <td>30</td>\n      <td>1115.200000</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Michael Kesselring</td>\n      <td>20</td>\n      <td>1126.350000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-25-output-2.png){width=571 height=522}\n:::\n:::\n\n\nI also worked to get goals,total assists, giveaways, takeaways, and shots blocked. I'll plot these against each other.\n\n::: {#b07f4f36 .cell execution_count=25}\n``` {.python .cell-code}\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(EXRRPRS,RGOL,color='purple')\nax1.scatter(EXRRPRS,RTAS)\nax1.legend(['Goals','Total Assists'])\nax1.title.set_text('Rookie Goals and Assists')\n\nax2.scatter(EXRRPRS,RTAW,color='red')\nax2.scatter(EXRRPRS,RGAW,color='black')\nax2.scatter(EXRRPRS,RSB,color='green')\nax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')\nax2.legend(['Takeaways','Giveaways','Shots Blocked'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-26-output-1.png){width=838 height=571}\n:::\n:::\n\n\nBased on these scatter plots, tables, and my goalie picks I'm going to assemble my list for the Calder Memorial Trophy.\n\n# My List for the Calder Memorial Trophy is as Follows:\n# 1) Kirill Marchenko\n# 2) Wyatt Johnston\n# 3) Dustin Wolf\n# 4) Marco Rossi\n# 5) Logan Thompson\n\nNext comes the Frank J Selke Trophy for the best overall defenseman in the league. This will include lefts and rights as well.\n\n::: {#b484bf69 .cell execution_count=26}\n``` {.python .cell-code}\nDFRSOIS=pd.read_csv(\"SkaterOnIcestats.csv\",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])\nDFilter=DFRSOIS.sort_values(by=['Position'])\nDP1=DFilter[DFilter['Position']=='D']\nDP2=DFilter[DFilter['Position']=='L']\nDP3=DFilter[DFilter['Position']=='R']\nDPFilter=DP1[DP1['GP']>60]\nDP2Filter=DP2[DP2['GP']>60]\nDP3Filter=DP3[DP3['GP']>60]\nTOIDFilter=DPFilter[DPFilter['TOI']>1300]\nTOID2Filter=DP2Filter[DP2Filter['TOI']>900]\nTOID3Filter=DP3Filter[DP3Filter['TOI']>550]\nDCFOrder=TOIDFilter.sort_values(by=['CF%'],ascending=[0])\nLCFOrder=TOID2Filter.sort_values(by=['CF%'],ascending=[0])\nRCFOrder=TOID3Filter.sort_values(by=['CF%'],ascending=[0])\nBD=DCFOrder.loc[:,'Player']\nBDCF=DCFOrder.loc[:,'CF%']\nBR=RCFOrder.loc[:,'Player']\nBRCF=RCFOrder.loc[:,'CF%']\nBL=LCFOrder.loc[:,'Player']\nBLCF=LCFOrder.loc[:,'CF%']\nBDD=pd.DataFrame(DCFOrder['Player'])\nBDL=pd.DataFrame(LCFOrder['Player'])\nBDR=pd.DataFrame(RCFOrder['Player'])\nDCF=pd.DataFrame(DCFOrder['CF%'])\nLCF=pd.DataFrame(LCFOrder['CF%'])\nRCF=pd.DataFrame(RCFOrder['CF%'])\npd.concat([BDD,DCF],ignore_index=[1])\nBDD['DCF']=DCF\nNBDD=BDD.sort_values(by=['DCF'],ascending=0)\npd.concat([BDL,LCF],ignore_index=[1])\nBDL['LCF']=LCF\nNBDL=BDL.sort_values(by=['LCF'],ascending=0)\npd.concat([BDR,RCF],ignore_index=[1])\nBDR['RCF']=RCF\nNBDR=BDR.sort_values(by=['RCF'],ascending=0)\nDPDOrder=TOIDFilter.sort_values(by=['PDO'],ascending=[0])\nLPDOrder=TOID2Filter.sort_values(by=['PDO'],ascending=[0])\nRPDOrder=TOID3Filter.sort_values(by=['PDO'],ascending=[0])\nDDD=DPDOrder.loc[:,'Player']\nDDP=DPDOrder.loc[:,'PDO']\nRRR=RPDOrder.loc[:,'Player']\nRRP=RPDOrder.loc[:,'PDO']\nLLL=LPDOrder.loc[:,'Player']\nLLP=LPDOrder.loc[:,'PDO']\nDPDO=pd.DataFrame(DPDOrder['PDO'])\nRPDO=pd.DataFrame(RPDOrder['PDO'])\nLPDO=pd.DataFrame(LPDOrder['PDO'])\nDPDOP=pd.DataFrame(DPDOrder['Player'])\nRPDOP=pd.DataFrame(RPDOrder['Player'])\nLPDOP=pd.DataFrame(LPDOrder['Player'])\npd.concat([DPDOP,DPDO],ignore_index=[1])\nDPDOP['PDO']=DPDO\nNDPDOP=DPDOP.sort_values(by=['PDO'],ascending=0)\npd.concat([RPDOP,RPDO],ignore_index=[1])\nRPDOP['PDO']=RPDO\nNRPDOP=RPDOP.sort_values(by=['PDO'],ascending=0)\npd.concat([LPDOP],ignore_index=[1])\nLPDOP['PDO']=LPDO\nNLPDOP=LPDOP.sort_values(by=['PDO'],ascending=0)\nDCFTOI=pd.DataFrame(DCFOrder['TOI'])\nRCFTOI=pd.DataFrame(RCFOrder['TOI'])\nLCFTOI=pd.DataFrame(LCFOrder['TOI'])\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDD['DCFTOI']=DCFTOI\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDR['RCFTOI']=RCFTOI\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDL['LCFTOI']=LCFTOI\nDPDOTOI=pd.DataFrame(DPDOrder['TOI'])\nRPDOTOI=pd.DataFrame(RPDOrder['TOI'])\nLPDOTOI=pd.DataFrame(LPDOrder['TOI'])\npd.concat([DPDO,DPDOTOI],ignore_index=[1])\nDPDO['DPDOTOI']=DPDOTOI\nRPDO['RPDOTOI']=RPDOTOI\nLPDO['LPDOTOI']=LPDOTOI\nOKD=BDCF\nOKR=BRCF\nOKL=BLCF\n```\n:::\n\n\n::: {#e2bb2433 .cell execution_count=27}\n``` {.python .cell-code}\nfig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(BD,BDCF,color='purple')\nax1.scatter(DDD,OKD,color='gold')\nax1.legend(['CF%','PDO'])\nax1.title.set_text('Defense CF% and PDO')\n\nax2.scatter(BL,BLCF,color='gold')\nax2.scatter(LLL,OKL,color='green')\nax2.title.set_text('Left Defense CF% and PDO')\nax2.legend(['CF%','PDO'])\n\nax3.scatter(BR,BRCF,color='gold')\nax3.scatter(RRR,OKR,color='grey')\nax3.title.set_text('Right Defense CF% and PDO')\nax3.legend(['CF%','PDO'])\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-28-output-1.png){width=828 height=557}\n:::\n:::\n\n\nI'm going to exclude time played from this analysis and nomination set because the scale of time on the ice between the different defensive player clusters is too large.\n\n# My list for the Frank J Selke Trophy is as follows:\n# 1) Cale Makar\n# 2) Jackson Blake\n# 3) Pierre-Luc Dubois\n# 4) John Carlson\n# 5) William Nylander\n\nNext will be the Hart Memorial Trophy for the player dubbed most valuable to his team. For the sake of time this will solely be based off of previously generated visualizaitons.\n\nThe first visulization will be for the goalies. Something important to note is that the values in the visualizations will be different for the goalies since they lack a CF% and PDO value compared to offensive and defensive players.\n\n::: {#71eb8368 .cell execution_count=28}\n``` {.python .cell-code}\nHDSVLL=SVFF.loc[:,'HDSV%']\nSVFFL=SVFF.loc[:,'SV%']\nGP=SVFF.loc[:,'Player']\nP1=plt.scatter(GP,HDSVLL)\nP2=plt.scatter(GP,SVFFL)\nplt.xticks(GP,rotation=90)\nplt.legend([P1,P2],['HDSV%','SV%'])\nplt.title('Players and Their Save and High Danger Save Percentages')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-29-output-1.png){width=579 height=564}\n:::\n:::\n\n\nNext will be the defensemen.\n\n::: {#474e61d3 .cell execution_count=29}\n``` {.python .cell-code}\nPD1=plt.scatter(DP,PDOD)\nPD2=plt.scatter(DP,PDOrder['CF%']/100)\nPD3=plt.scatter(DP,PDOrder['TOI']/1000)\nplt.xticks(PDOrder['Player'],rotation=90)\nplt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])\nplt.ylabel('PDO and discrete CF and TOI values')\nplt.title('Players and Their Important Stats')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-30-output-1.png){width=589 height=522}\n:::\n:::\n\n\nNow come all the defensive players including the left and right defenders.\n\n::: {#d9780ad4 .cell execution_count=30}\n``` {.python .cell-code}\nfig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(BD,BDCF,color='purple')\nax1.scatter(DDD,OKD,color='gold')\nax1.legend(['CF%','PDO'])\nax1.title.set_text('Defense CF% and PDO')\n\nax2.scatter(BL,BLCF,color='gold')\nax2.scatter(LLL,OKL,color='green')\nax2.title.set_text('Left Defense CF% and PDO')\nax2.legend(['CF%','PDO'])\n\nax3.scatter(BR,BRCF,color='gold')\nax3.scatter(RRR,OKR,color='grey')\nax3.title.set_text('Right Defense CF% and PDO')\nax3.legend(['CF%','PDO'])\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-31-output-1.png){width=828 height=557}\n:::\n:::\n\n\nLastly, we'll bring the rookies into the ring since they too deserve to be considered for being the most valuable player potentially.\n\n::: {#0cfac988 .cell execution_count=31}\n``` {.python .cell-code}\nRGSV=DFRGFilter.loc[:,'SV%']\nRGHDSV=DFRGFilter.loc[:,'HDSV%']\nRGP=DFRGFilter.loc[:,'Player']\nPRG1=plt.scatter(RGP,RGSV)\nPRG2=plt.scatter(RGP,RGHDSV)\nplt.legend([PRG1,PRG2],['SV%','HDSV%'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('SV and HDSV Percentages')\nplt.title('Rookie Goalies and The Save They Make')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-32-output-1.png){width=597 height=571}\n:::\n:::\n\n\n::: {#aaabbdf3 .cell execution_count=32}\n``` {.python .cell-code}\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(EXRRPRS,RGOL,color='purple')\nax1.scatter(EXRRPRS,RTAS)\nax1.legend(['Goals','Total Assists'])\nax1.title.set_text('Rookie Goals and Assists')\n\nax2.scatter(EXRRPRS,RTAW,color='red')\nax2.scatter(EXRRPRS,RGAW,color='black')\nax2.scatter(EXRRPRS,RSB,color='green')\nax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')\nax2.legend(['Takeaways','Giveaways','Shots Blocked'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-33-output-1.png){width=838 height=571}\n:::\n:::\n\n\nNow that all of the previously generated visualiztions are here, it's time to get a new one added to the mix. Essentially it'll be just like the Rookie Goals and Assists set of visualizations but for the more seasoned skaters. TOI will be divided by 100 seconds to properly scale it and discreitze it so it can be more easily visualized.\n\n::: {#8bbc891b .cell execution_count=33}\n``` {.python .cell-code}\nDFSIT = pd.read_csv(\"SkaterOnIcestats.csv\")\nDFSITFilter=DFSIT[DFSIT['CF']>1550]\nPDOSOrder=DFSITFilter.sort_values(by=['PDO'],ascending=[0])\nSCFOrder=PDOSOrder.sort_values(by=['CF%'],ascending=[0])\nPDOSV=PDOSOrder.loc[:,'PDO']\nSCFV=SCFOrder.loc[:,'CF%']/100\nSGOL=PDOSOrder.loc[:,'GF%']\nSTAS=DFSITFilter.loc[:,'FA']\nSTAHDG=DFSITFilter.loc[:,'HDGF%']\nSGAW=DFSITFilter.loc[:,'GA']\nSSB=DFSITFilter.loc[:,'On-Ice SV%']\nSTOI=DFSITFilter.loc[:,'TOI']/100\nSPRS=PDOSOrder.loc[:,'Player']\nEXSRPRS=DFSITFilter.loc[:,'Player']\nOSP=pd.DataFrame(DFSITFilter['Player'])\n```\n:::\n\n\n::: {#18109ffb .cell execution_count=34}\n``` {.python .cell-code}\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(SPRS,PDOSV,color='purple')\nax1.scatter(SPRS,SCFV)\nax1.legend(['Goals','high Danger Goals'])\nax1.title.set_text('PDO and CF')\n\nax2.scatter(EXSRPRS,SSB,color='red')\nax2.scatter(EXSRPRS,STAHDG,color='black')\nax2.scatter(EXSRPRS,STOI,color='green')\nax2.title.set_text('On-Ice SV%, HDGF%, and TOI')\nax2.legend(['On-Ice SV%','HDGF%','TOI (x100)'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Assignment5_files/figure-html/cell-35-output-1.png){width=818 height=558}\n:::\n:::\n\n\n# Now it comes time to make my picks for the Hart Memorial Trophy. The list is as follows:\n# 1) Connor Hellbuyck\n# 2) Zach Weresnki\n# 3) Kirill Marchenko\n# 4) Dustin Wolf\n# 5) John Carlson\n\nLastly comes the Lady Byng trophy given to the athlete who displays the best sportsmanship and skills. Information related to skill is going to be pulled from the Hart Memorial Trophy visualizations above, but for sportsmanship the primary metrics being looked at will be penalties incurred by skaters.\n\n::: {#489e94a7 .cell execution_count=35}\n``` {.python .cell-code}\nRPEN=pd.read_csv(\"RookieSkaterIndividual.csv\",usecols=['Player','TOI','PIM','Total Penalties','Minor','Major','Misconduct','Penalties Drawn'])\nSPEN=pd.read_csv(\"SkaterIndividualstats.csv\",usecols=['Player','TOI','PIM','Total Penalties','Minor','Major','Misconduct','Penalties Drawn'])\nSPEN.sort_values(by=['Major'],ascending=[1])\nSPENFilter=SPEN[SPEN['TOI']>1400]\ndisplay(SPENFilter)\nSPPS=SPENFilter.loc[:,'Player']\nSPIM=SPENFilter.loc[:,'PIM']\nSTP=SPENFilter.loc[:,'Total Penalties']\nSMI=SPENFilter.loc[:,'Minor']\nSMJ=SPENFilter.loc[:,'Major']\nSMC=SPENFilter.loc[:,'Misconduct']\nSPD=SPENFilter.loc[:,'Penalties Drawn']\nSPENT=SPIM+STP+SMI+SMJ+SMC+SPD\nSPENT1=pd.DataFrame(SPENT)\nSPPS1=pd.DataFrame(SPPS)\nAG=pd.concat([SPENT,SPPS],ignore_index=[1])\nSPPS1['SPENT1']=SPENT1\nSPPS1.sort_values(by=['SPENT1'],ascending=[1])\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>TOI</th>\n      <th>PIM</th>\n      <th>Total Penalties</th>\n      <th>Minor</th>\n      <th>Major</th>\n      <th>Misconduct</th>\n      <th>Penalties Drawn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>Cale Makar</td>\n      <td>1574.800000</td>\n      <td>12</td>\n      <td>6</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Zach Werenski</td>\n      <td>1586.366667</td>\n      <td>29</td>\n      <td>13</td>\n      <td>12</td>\n      <td>1</td>\n      <td>0</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>Josh Morrissey</td>\n      <td>1445.800000</td>\n      <td>22</td>\n      <td>11</td>\n      <td>11</td>\n      <td>0</td>\n      <td>0</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>Evan Bouchard</td>\n      <td>1414.666667</td>\n      <td>22</td>\n      <td>11</td>\n      <td>11</td>\n      <td>0</td>\n      <td>0</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>Erik Karlsson</td>\n      <td>1466.800000</td>\n      <td>18</td>\n      <td>9</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>Jake Sanderson</td>\n      <td>1447.350000</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>John Carlson</td>\n      <td>1452.316667</td>\n      <td>18</td>\n      <td>9</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>122</th>\n      <td>Mikhail Sergachev</td>\n      <td>1430.150000</td>\n      <td>20</td>\n      <td>10</td>\n      <td>10</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>Moritz Seider</td>\n      <td>1515.966667</td>\n      <td>30</td>\n      <td>15</td>\n      <td>15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>Colton Parayko</td>\n      <td>1455.716667</td>\n      <td>8</td>\n      <td>4</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>MacKenzie Weegar</td>\n      <td>1427.033333</td>\n      <td>27</td>\n      <td>12</td>\n      <td>11</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>Devon Toews</td>\n      <td>1413.983333</td>\n      <td>16</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>202</th>\n      <td>Mike Matheson</td>\n      <td>1461.600000</td>\n      <td>43</td>\n      <td>16</td>\n      <td>14</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>207</th>\n      <td>Ivan Provorov</td>\n      <td>1413.683333</td>\n      <td>18</td>\n      <td>9</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>219</th>\n      <td>Travis Sanheim</td>\n      <td>1496.050000</td>\n      <td>28</td>\n      <td>14</td>\n      <td>14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>264</th>\n      <td>Alex Vlasic</td>\n      <td>1444.850000</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>267</th>\n      <td>Brock Faber</td>\n      <td>1430.333333</td>\n      <td>19</td>\n      <td>8</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>277</th>\n      <td>Gustav Forsling</td>\n      <td>1418.650000</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>298</th>\n      <td>Rasmus Andersson</td>\n      <td>1447.283333</td>\n      <td>50</td>\n      <td>21</td>\n      <td>20</td>\n      <td>0</td>\n      <td>1</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>316</th>\n      <td>Vladislav Gavrikov</td>\n      <td>1406.100000</td>\n      <td>14</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>SPENT1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>150</th>\n      <td>Colton Parayko</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>264</th>\n      <td>Alex Vlasic</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>277</th>\n      <td>Gustav Forsling</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>Jake Sanderson</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>316</th>\n      <td>Vladislav Gavrikov</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>Devon Toews</td>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Cale Makar</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>Erik Karlsson</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>John Carlson</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>267</th>\n      <td>Brock Faber</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>207</th>\n      <td>Ivan Provorov</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>122</th>\n      <td>Mikhail Sergachev</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>Josh Morrissey</td>\n      <td>55</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>Evan Bouchard</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>MacKenzie Weegar</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Zach Werenski</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>219</th>\n      <td>Travis Sanheim</td>\n      <td>71</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>Moritz Seider</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>202</th>\n      <td>Mike Matheson</td>\n      <td>87</td>\n    </tr>\n    <tr>\n      <th>298</th>\n      <td>Rasmus Andersson</td>\n      <td>110</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe players with the best sportmanship will have the lowest SPENT1 values above. The problem is that there are tons of them with a score of 0. I then sorted by TOI with a minimum TOI of 1500 required. From here I looked at more seasoned players who were in the above nominations. These include Cale Makar, Erik Karlsson, John Carlson, and Zach Werenski. Next will come the rookies.\n\n::: {#dca28934 .cell execution_count=36}\n``` {.python .cell-code}\nRPENFilter=RPEN[RPEN['TOI']>1000]\ndisplay(RPENFilter)\nRPPS=RPENFilter.loc[:,'Player']\nRPIM=RPENFilter.loc[:,'PIM']\nRTP=RPENFilter.loc[:,'Total Penalties']\nRMI=RPENFilter.loc[:,'Minor']\nRMJ=RPENFilter.loc[:,'Major']\nRMC=RPENFilter.loc[:,'Misconduct']\nRPD=RPENFilter.loc[:,'Penalties Drawn']\nRPENT=RPIM+RTP+RMI+RMJ+RMC+RPD\nRPENT1=pd.DataFrame(RPENT)\nRPPS1=pd.DataFrame(RPPS)\nRG=pd.concat([RPENT,RPPS],ignore_index=[1])\nRPPS1['RPENT1']=RPENT1\nRPPS1.sort_values(by=['RPENT1'],ascending=[1])\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>TOI</th>\n      <th>PIM</th>\n      <th>Total Penalties</th>\n      <th>Minor</th>\n      <th>Major</th>\n      <th>Misconduct</th>\n      <th>Penalties Drawn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Kirill Marchenko</td>\n      <td>1071.616667</td>\n      <td>14</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Wyatt Johnston</td>\n      <td>1147.883333</td>\n      <td>12</td>\n      <td>6</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Marco Rossi</td>\n      <td>1117.233333</td>\n      <td>24</td>\n      <td>12</td>\n      <td>12</td>\n      <td>0</td>\n      <td>0</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>JJ Peterka</td>\n      <td>1029.950000</td>\n      <td>24</td>\n      <td>8</td>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Dylan Holloway</td>\n      <td>1031.983333</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>William Eklund</td>\n      <td>1115.200000</td>\n      <td>22</td>\n      <td>7</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Matthew Knies</td>\n      <td>1051.133333</td>\n      <td>26</td>\n      <td>13</td>\n      <td>13</td>\n      <td>0</td>\n      <td>0</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Jake Sanderson</td>\n      <td>1447.350000</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Fabian Zetterlund</td>\n      <td>1051.466667</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Matty Beniers</td>\n      <td>1131.600000</td>\n      <td>12</td>\n      <td>6</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Owen Power</td>\n      <td>1304.666667</td>\n      <td>12</td>\n      <td>6</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Jackson LaCombe</td>\n      <td>1104.983333</td>\n      <td>18</td>\n      <td>9</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Luke Hughes</td>\n      <td>1084.366667</td>\n      <td>14</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Simon Edvinsson</td>\n      <td>1169.200000</td>\n      <td>36</td>\n      <td>14</td>\n      <td>13</td>\n      <td>0</td>\n      <td>1</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Michael Kesselring</td>\n      <td>1126.350000</td>\n      <td>65</td>\n      <td>20</td>\n      <td>15</td>\n      <td>3</td>\n      <td>2</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Alex Vlasic</td>\n      <td>1444.850000</td>\n      <td>10</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Brock Faber</td>\n      <td>1430.333333</td>\n      <td>19</td>\n      <td>8</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Ryker Evans</td>\n      <td>1074.066667</td>\n      <td>18</td>\n      <td>9</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Jordan Spence</td>\n      <td>1010.166667</td>\n      <td>16</td>\n      <td>8</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>Johnathan Kovacevic</td>\n      <td>1218.133333</td>\n      <td>47</td>\n      <td>19</td>\n      <td>16</td>\n      <td>3</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>RPENT1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32</th>\n      <td>Alex Vlasic</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Jake Sanderson</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Dylan Holloway</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Owen Power</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Luke Hughes</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Wyatt Johnston</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Jordan Spence</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Fabian Zetterlund</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Jackson LaCombe</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Kirill Marchenko</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Matty Beniers</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Ryker Evans</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Brock Faber</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>William Eklund</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>JJ Peterka</td>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Marco Rossi</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Matthew Knies</td>\n      <td>66</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Simon Edvinsson</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>Johnathan Kovacevic</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Michael Kesselring</td>\n      <td>118</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#067c98da .cell execution_count=37}\n``` {.python .cell-code}\nCale=42\nErik=43\nJohn=43\nZach=68\nAlex=25\nWyatt=34\nKirill=41\n```\n:::\n\n\nSome names seen previously include Alex Vlasic, Wyatt Johnston, and Kirill Marchenko. Next comes time to compare these players specifically. Interestingly enough the rookies have lower incursion scores which is the sum of major and minor penalties, penalties drawn, PIM, total penalties, and misconduct.\n\n# My list for the Lady Byng Trophy is as follows:\n# 1) Cale Makar\n# 2) Kirill Marchenko\n# 3) Alex Vlasic\n# 4) Erik Karlsson\n# 5) John Carlson\n\n\n.png\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport statistics\nfrom matplotlib import cm\nimport csv\nimport tidypandas as tp\nDFGV=pd.read_csv(\"Goalies.csv\", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\n#print(DFGV)\nDFSIT = pd.read_csv(\"SkaterIndividualstats.csv\")\n#print(DFSIT)\nDFSOIS=pd.read_csv(\"SkaterOnIcestats.csv\")\n#print(DFG)\nDFRG=pd.read_csv(\"RookieGoalies.csv\")\n#print(DFRG)\nDFRSIT=pd.read_csv(\"RookieSkaterOnIce.csv\")\n#print(DFRSIT)\nDFRSOIS=pd.read_csv(\"RookieSkaterIndividual.csv\")\n#print(DFRSOIS)\n```\n\nLet's start with the Vezina trophy for the best goalie.\n\n```\nDFGV=pd.read_csv(\"Goalies.csv\", usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\n```\n\nFirst I will filter out goalies who have fewer than 1000 saves\n\n```\nfiltered_DFGV = DFGV[DFGV['Saves'] >1000]\ndisplay(filtered_DFGV)\n```\n\nNext I'll sort by the High Danger Save Percentages\n\n```\nHDOrder=filtered_DFGV.sort_values(by=['HDSV%'], ascending=[0])\ndisplay(HDOrder)\n```\n\nOne last order that I'm going to perform is to order goalies by save percentage before doing further filtering\n\n```\nSVOrder=filtered_DFGV.sort_values(by=['SV%'], ascending=[0])\ndisplay(SVOrder)\n```\n\nNow I'm going to run another filter on the data. This time I will set a filter that clears out anyone who has a High Danger Save Percentage lower than 80%.\n\n```\nHDSVFilter=filtered_DFGV[filtered_DFGV['HDSV%']>0.8]\ndisplay(HDSVFilter)\n```\n\nNext is a second filter to filter out those who have a saver percentage beneath 90%.\n\n```\nSVFilter=HDSVFilter[HDSVFilter['SV%']>0.9]\ndisplay(SVFilter)\n```\n\nThe next two reorderings will be first by HDSV percentage and then by SV percentage\n\n```\nHDSVF=SVFilter.sort_values(by=['HDSV%'], ascending=[0])\ndisplay(HDSVF)\n```\n\n```\nSVFF=SVFilter.sort_values(by=['SV%'], ascending=[0])\ndisplay(SVFF)\n```\n\n```\nSAL=SVFilter.sort_values(by=['Shots Against'], ascending=[0])\n```\n\nFirstly, I will plot players and their total number of shots against.\n\n```\nplt.scatter(SAL['Player'],SAL['Shots Against'])\nplt.xticks(SAL['Player'],rotation=90)\nplt.ylabel('Shots Against')\nplt.title('Players and The Shots Against Them')\nplt.show\n```\n\nNext I will plot players and their save percentages and high danger save percentages.\n\n```\nHDSVLL=SVFF.loc[:,'HDSV%']\nSVFFL=SVFF.loc[:,'SV%']\nGP=SVFF.loc[:,'Player']\nP1=plt.scatter(GP,HDSVLL)\nP2=plt.scatter(GP,SVFFL)\nplt.xticks(GP,rotation=90)\nplt.legend([P1,P2],['HDSV%','SV%'])\nplt.title('Players and Their Save and High Danger Save Percentages')\nplt.show()\n```\n\n# From these plots and the tables generated in filtering and ordering the data I will create my ticket for the Vezina Trophy.\n# My ticket is as follows:\n# 1) Connor Hellebuyck\n# 2) Andrei Vasilevskiy\n# 3) Igor Shesterkin\n# 4) Mackenzie Blackwood\n# 5) Filip Gustavsson\n\nThe next trophy is the James Norris Memorial trophy for the best overall defenseman for the position.\n\nThe first thing I plan to do is run a filter on the data. For defesnsive players and other pertinent information like GP, TOI, CF, CA, CF% and PDO as metrics for their performance.\n\n```\nDFRSOIS=pd.read_csv(\"SkaterOnIcestats.csv\",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])\nDFilter=DFRSOIS.sort_values(by=['Position'])\nD=DFilter[DFilter['Position']=='D']\ndisplay(D)\n```\n\nNext I will run a series of filters to filter for time on the ice and games played.\n\n```\nDPFilter=D[D['GP']>60]\nTOIDFilter=DPFilter[DPFilter['TOI']>1300]\ndisplay(TOIDFilter)\n```\n\nI will reorder based on the total time on the ice that players are getting.\n\n```\nTOIDOrder=TOIDFilter.sort_values(by=['TOI'],ascending=[0])\ndisplay(TOIDOrder)\n```\n\nFrom here I can see that CF and CA values don't directly correlate with time on the ice. From here I will reorder based on the CF% as a value greater than 55% is considered to be the best of the best.\n\n```\nCFOrder=TOIDOrder.sort_values(by=['CF%'],ascending=[0])\ndisplay(CFOrder)\n```\n\n```\nCF=CFOrder.loc[:,'CF']\nTOID=CFOrder.loc[:,'TOI']\nDP=CFOrder.loc[:,'Player']\nGames=CFOrder.loc[:'GP']\nplt.scatter(TOIDOrder['Player'],TOIDOrder['TOI'])\nplt.xticks(TOIDOrder['Player'],rotation=90)\nplt.ylabel('TIO(seconds)')\nplt.title('Players and Their Time on the Ice')\nplt.show\n```\n\nOne final reordering will be based on PDO values as a value greater than one means that players are playing better than expected.\n\n```\nPDOrder=TOIDOrder.sort_values(by=['PDO'],ascending=[0])\nPDOD=PDOrder.loc[:,'PDO']\ndisplay(PDOrder)\n```\n\nThe following plot will plot players PDO values and their CF values which are their CF percentages divided by 100% to get them to a discrete decimal value scale. I also took the players' time on the ice and divided it by 1000 seconds to get a discrete value for how many seconds they spend on the ice with the basis being 1000 seconds.\n\n```\nPD1=plt.scatter(DP,PDOD)\nPD2=plt.scatter(DP,PDOrder['CF%']/100)\nPD3=plt.scatter(DP,PDOrder['TOI']/1000)\nplt.xticks(PDOrder['Player'],rotation=90)\nplt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])\nplt.ylabel('PDO and discrete CF and TOI values')\nplt.title('Players and Their Important Stats')\nplt.show()\n```\n\n# Based on the above visualization my ticket for the James Norris Memorial Trophy is as follows:\n# 1) Lane Hutson\n# 2) Erik Karlsson\n# 3) John Carlson\n# 4) Alex Vlasic\n# 5) Brent Burns\n\nThe next trophy is going to be the Calder Memorial Trophy which goes to the best rookie in the league. I'm going to divide the data for rookies between goalies and non-goalies.\n\nFirst comes the rookie goalies. The data will be reordered to show who has had the most shots taken against them. Then the first filter will be applied. This will be based on games played.\n\n```\nDFRG=pd.read_csv(\"RookieGoalies.csv\",usecols=['Player','GP','TOI','Shots Against','Saves','SV%','HD Shots Against','HD Saves','HDSV%'])\nDFRGFilter=DFRG[DFRG['GP']>25]\nDFRGSAO=DFRG.sort_values(by=['Shots Against'],ascending=[0])\ndisplay(DFRGSAO,DFRGFilter)\n```\n\n```\nRGSV=DFRGFilter.loc[:,'SV%']\nRGHDSV=DFRGFilter.loc[:,'HDSV%']\nRGP=DFRGFilter.loc[:,'Player']\nPRG1=plt.scatter(RGP,RGSV)\nPRG2=plt.scatter(RGP,RGHDSV)\nplt.legend([PRG1,PRG2],['SV%','HDSV%'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('SV and HDSV Percentages')\nplt.title('Rookie Goalies and The Save They Make')\nplt.show()\n```\n\n```\nRGSAT=DFRGFilter.sort_values(by=['Shots Against'],ascending=[0])\ndisplay(RGSAT)\n```\n\n```\nplt.scatter(RGP,RGSAT['Shots Against'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('Shots Against')\nplt.title('Rookie Goalies and the shots taken against them')\nplt.show\n```\n\n# Before moving on to other rookies I want to list my top five rookie goalies who I will consider for the Calder Memorial Trophy in conjunction with all other rookies.\n# The list is as follows:\n# 1) Dustin Wolf\n# 2) Logan Thompson\n# 3) Lukas Dostal\n# 4) Pyotr Kochetkov\n# 5) Joseph Woll\n\nFor the rest of the rookies I will initially pull all the data and filter them out by having a minimum CF value of 1100 and a minimum time on the ice of 1100 seconds. I'll then reorder the rookie skater on ice data by PDO and CF% values in descending order. Afterward I will scale the CF% by dividing them by 100 to get them on the same scale as the PDO values and plot them against each other.\n\n```\nDFRSIT=pd.read_csv(\"RookieSkaterOnIce.csv\")\nDFRSOIS=pd.read_csv(\"RookieSkaterIndividual.csv\")\nDFRSITFilter=DFRSIT[DFRSIT['CF']>1100]\nDFRSOISFilter=DFRSOIS[DFRSOIS['TOI']>1050]\nPDOROrder=DFRSITFilter.sort_values(by=['PDO'],ascending=[0])\nRCFOrder=PDOROrder.sort_values(by=['CF%'],ascending=[0])\nPDORV=PDOROrder.loc[:,'PDO']\nRCFV=RCFOrder.loc[:,'CF%']\nRGOL=DFRSOISFilter.loc[:,'Goals']\nRTAS=DFRSOISFilter.loc[:,'Total Assists']\nRTAW=DFRSOISFilter.loc[:,'Takeaways']\nRGAW=DFRSOISFilter.loc[:,'Giveaways']\nRSB=DFRSOISFilter.loc[:,'Shots Blocked']\nRTOI=DFRSOISFilter.loc[:,'TOI']\nRPRS=PDOROrder.loc[:,'Player']\nEXR=RGOL+RTAS+RTAW+RSB-RGAW\nEXRRPRS=DFRSOISFilter.loc[:,'Player']\nORP=pd.DataFrame(DFRSOISFilter['Player'])\nOP=pd.DataFrame(EXR)\npd.concat([EXR,ORP],ignore_index=[1])\nORP['EXR']=EXR\nORP['RTOI']=RTOI\nNORP=ORP.sort_values(by=['EXR'],ascending=[0])\ndisplay(NORP)\nRPS1=plt.scatter(RPRS,PDORV)\nRPS2=plt.scatter(RPRS,RCFV/100)\nplt.xticks(RPRS,rotation=90)\nplt.legend([RPS1,RPS2],['PDO','CF%'])\nplt.show()\n```\n\nI also worked to get goals,total assists, giveaways, takeaways, and shots blocked. I'll plot these against each other.\n\n```\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(EXRRPRS,RGOL,color='purple')\nax1.scatter(EXRRPRS,RTAS)\nax1.legend(['Goals','Total Assists'])\nax1.title.set_text('Rookie Goals and Assists')\n\nax2.scatter(EXRRPRS,RTAW,color='red')\nax2.scatter(EXRRPRS,RGAW,color='black')\nax2.scatter(EXRRPRS,RSB,color='green')\nax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')\nax2.legend(['Takeaways','Giveaways','Shots Blocked'])\nplt.show()\n```\n\nBased on these scatter plots, tables, and my goalie picks I'm going to assemble my list for the Calder Memorial Trophy.\n\n# My List for the Calder Memorial Trophy is as Follows:\n# 1) Kirill Marchenko\n# 2) Wyatt Johnston\n# 3) Dustin Wolf\n# 4) Marco Rossi\n# 5) Logan Thompson\n\nNext comes the Frank J Selke Trophy for the best overall defenseman in the league. This will include lefts and rights as well.\n\n```\nDFRSOIS=pd.read_csv(\"SkaterOnIcestats.csv\",usecols=['Player','Position','GP','TOI','CF','CA','CF%','PDO'])\nDFilter=DFRSOIS.sort_values(by=['Position'])\nDP1=DFilter[DFilter['Position']=='D']\nDP2=DFilter[DFilter['Position']=='L']\nDP3=DFilter[DFilter['Position']=='R']\nDPFilter=DP1[DP1['GP']>60]\nDP2Filter=DP2[DP2['GP']>60]\nDP3Filter=DP3[DP3['GP']>60]\nTOIDFilter=DPFilter[DPFilter['TOI']>1300]\nTOID2Filter=DP2Filter[DP2Filter['TOI']>900]\nTOID3Filter=DP3Filter[DP3Filter['TOI']>550]\nDCFOrder=TOIDFilter.sort_values(by=['CF%'],ascending=[0])\nLCFOrder=TOID2Filter.sort_values(by=['CF%'],ascending=[0])\nRCFOrder=TOID3Filter.sort_values(by=['CF%'],ascending=[0])\nBD=DCFOrder.loc[:,'Player']\nBDCF=DCFOrder.loc[:,'CF%']\nBR=RCFOrder.loc[:,'Player']\nBRCF=RCFOrder.loc[:,'CF%']\nBL=LCFOrder.loc[:,'Player']\nBLCF=LCFOrder.loc[:,'CF%']\nBDD=pd.DataFrame(DCFOrder['Player'])\nBDL=pd.DataFrame(LCFOrder['Player'])\nBDR=pd.DataFrame(RCFOrder['Player'])\nDCF=pd.DataFrame(DCFOrder['CF%'])\nLCF=pd.DataFrame(LCFOrder['CF%'])\nRCF=pd.DataFrame(RCFOrder['CF%'])\npd.concat([BDD,DCF],ignore_index=[1])\nBDD['DCF']=DCF\nNBDD=BDD.sort_values(by=['DCF'],ascending=0)\npd.concat([BDL,LCF],ignore_index=[1])\nBDL['LCF']=LCF\nNBDL=BDL.sort_values(by=['LCF'],ascending=0)\npd.concat([BDR,RCF],ignore_index=[1])\nBDR['RCF']=RCF\nNBDR=BDR.sort_values(by=['RCF'],ascending=0)\nDPDOrder=TOIDFilter.sort_values(by=['PDO'],ascending=[0])\nLPDOrder=TOID2Filter.sort_values(by=['PDO'],ascending=[0])\nRPDOrder=TOID3Filter.sort_values(by=['PDO'],ascending=[0])\nDDD=DPDOrder.loc[:,'Player']\nDDP=DPDOrder.loc[:,'PDO']\nRRR=RPDOrder.loc[:,'Player']\nRRP=RPDOrder.loc[:,'PDO']\nLLL=LPDOrder.loc[:,'Player']\nLLP=LPDOrder.loc[:,'PDO']\nDPDO=pd.DataFrame(DPDOrder['PDO'])\nRPDO=pd.DataFrame(RPDOrder['PDO'])\nLPDO=pd.DataFrame(LPDOrder['PDO'])\nDPDOP=pd.DataFrame(DPDOrder['Player'])\nRPDOP=pd.DataFrame(RPDOrder['Player'])\nLPDOP=pd.DataFrame(LPDOrder['Player'])\npd.concat([DPDOP,DPDO],ignore_index=[1])\nDPDOP['PDO']=DPDO\nNDPDOP=DPDOP.sort_values(by=['PDO'],ascending=0)\npd.concat([RPDOP,RPDO],ignore_index=[1])\nRPDOP['PDO']=RPDO\nNRPDOP=RPDOP.sort_values(by=['PDO'],ascending=0)\npd.concat([LPDOP],ignore_index=[1])\nLPDOP['PDO']=LPDO\nNLPDOP=LPDOP.sort_values(by=['PDO'],ascending=0)\nDCFTOI=pd.DataFrame(DCFOrder['TOI'])\nRCFTOI=pd.DataFrame(RCFOrder['TOI'])\nLCFTOI=pd.DataFrame(LCFOrder['TOI'])\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDD['DCFTOI']=DCFTOI\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDR['RCFTOI']=RCFTOI\npd.concat([NBDD,DCFTOI],ignore_index=[1])\nNBDL['LCFTOI']=LCFTOI\nDPDOTOI=pd.DataFrame(DPDOrder['TOI'])\nRPDOTOI=pd.DataFrame(RPDOrder['TOI'])\nLPDOTOI=pd.DataFrame(LPDOrder['TOI'])\npd.concat([DPDO,DPDOTOI],ignore_index=[1])\nDPDO['DPDOTOI']=DPDOTOI\nRPDO['RPDOTOI']=RPDOTOI\nLPDO['LPDOTOI']=LPDOTOI\nOKD=BDCF\nOKR=BRCF\nOKL=BLCF\n```\n\n```\nfig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(BD,BDCF,color='purple')\nax1.scatter(DDD,OKD,color='gold')\nax1.legend(['CF%','PDO'])\nax1.title.set_text('Defense CF% and PDO')\n\nax2.scatter(BL,BLCF,color='gold')\nax2.scatter(LLL,OKL,color='green')\nax2.title.set_text('Left Defense CF% and PDO')\nax2.legend(['CF%','PDO'])\n\nax3.scatter(BR,BRCF,color='gold')\nax3.scatter(RRR,OKR,color='grey')\nax3.title.set_text('Right Defense CF% and PDO')\nax3.legend(['CF%','PDO'])\n\nplt.show()\n```\n\nI'm going to exclude time played from this analysis and nomination set because the scale of time on the ice between the different defensive player clusters is too large.\n\n# My list for the Frank J Selke Trophy is as follows:\n# 1) Cale Makar\n# 2) Jackson Blake\n# 3) Pierre-Luc Dubois\n# 4) John Carlson\n# 5) William Nylander\n\nNext will be the Hart Memorial Trophy for the player dubbed most valuable to his team. For the sake of time this will solely be based off of previously generated visualizaitons.\n\nThe first visulization will be for the goalies. Something important to note is that the values in the visualizations will be different for the goalies since they lack a CF% and PDO value compared to offensive and defensive players.\n\n```\nHDSVLL=SVFF.loc[:,'HDSV%']\nSVFFL=SVFF.loc[:,'SV%']\nGP=SVFF.loc[:,'Player']\nP1=plt.scatter(GP,HDSVLL)\nP2=plt.scatter(GP,SVFFL)\nplt.xticks(GP,rotation=90)\nplt.legend([P1,P2],['HDSV%','SV%'])\nplt.title('Players and Their Save and High Danger Save Percentages')\nplt.show()\n```\n\nNext will be the defensemen.\n\n```\nPD1=plt.scatter(DP,PDOD)\nPD2=plt.scatter(DP,PDOrder['CF%']/100)\nPD3=plt.scatter(DP,PDOrder['TOI']/1000)\nplt.xticks(PDOrder['Player'],rotation=90)\nplt.legend([PD1,PD2,PD3],['PDO','CF Value','TOI (x1000)'])\nplt.ylabel('PDO and discrete CF and TOI values')\nplt.title('Players and Their Important Stats')\nplt.show()\n```\n\nNow come all the defensive players including the left and right defenders.\n\n```\nfig, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(BD,BDCF,color='purple')\nax1.scatter(DDD,OKD,color='gold')\nax1.legend(['CF%','PDO'])\nax1.title.set_text('Defense CF% and PDO')\n\nax2.scatter(BL,BLCF,color='gold')\nax2.scatter(LLL,OKL,color='green')\nax2.title.set_text('Left Defense CF% and PDO')\nax2.legend(['CF%','PDO'])\n\nax3.scatter(BR,BRCF,color='gold')\nax3.scatter(RRR,OKR,color='grey')\nax3.title.set_text('Right Defense CF% and PDO')\nax3.legend(['CF%','PDO'])\n\nplt.show()\n```\n\nLastly, we'll bring the rookies into the ring since they too deserve to be considered for being the most valuable player potentially.\n\n```\nRGSV=DFRGFilter.loc[:,'SV%']\nRGHDSV=DFRGFilter.loc[:,'HDSV%']\nRGP=DFRGFilter.loc[:,'Player']\nPRG1=plt.scatter(RGP,RGSV)\nPRG2=plt.scatter(RGP,RGHDSV)\nplt.legend([PRG1,PRG2],['SV%','HDSV%'])\nplt.xticks(RGP,rotation=90)\nplt.ylabel('SV and HDSV Percentages')\nplt.title('Rookie Goalies and The Save They Make')\nplt.show()\n```\n\n```\nfig, (ax1,ax2) = plt.subplots(1, 2, figsize=(10, 5))\nplt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.4)\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=90)\nax1.scatter(EXRRPRS,RGOL,color='purple')\nax1.scatter(EXRRPRS,RTAS)\nax1.legend(['Goals','Total Assists'])\nax1.title.set_text('Rookie Goals and Assists')\n\nax2.scatter(EXRRPRS,RTAW,color='red')\nax2.scatter(EXRRPRS,RGAW,color='black')\nax2.scatter(EXRRPRS,RSB,color='green')\nax2.title.set_text('Rookie Takeaways, Giveaways, and Shots Blocked')\nax2.legend(['Takeaways','Giveaways','Shots Blocked'])\nplt.show()\n```\n\nNow that all of the previously generated visualiztions are here, it's time to get a new one added to the mix. Essentially it'll be just like the Rookie Goals and Assists set of visualizations but for the more seasoned skaters. TOI will be divided by 100 seconds to properly scale it and discreitze it so it can be more easily visualized.\n\n```\n\n",
    "supporting": [
      "Assignment5_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}