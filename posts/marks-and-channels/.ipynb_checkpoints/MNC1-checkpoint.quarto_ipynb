{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Marks and Channels\"\n",
        "author: \"Ian\"\n",
        "categories: [Marks and Channels]\n",
        "image: \"Morphine Structure.png\"\n",
        "code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "This is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc. \n",
        "\n",
        " Let us skip all the boring code since it is all going to eb recycled from the last post.\n"
      ],
      "id": "ca38ce2e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import statistics\n",
        "\n",
        "SPD02 = 251/603;\n",
        "CDU02 = 190/603;\n",
        "CSU02 = 58/603;\n",
        "Bund02 = 55/603;\n",
        "FDP02 = 47/603;\n",
        "PDS02 = 2/603;\n",
        "Union02=CDU02+CSU02;\n",
        "\n",
        "SPD02MV = 41.7;\n",
        "SPD02SH = 42.9;\n",
        "SPD02HM = 42;\n",
        "SPD02BR = 48.6;\n",
        "SPD02BL = 36.6;\n",
        "SPD02BB = 46.4;\n",
        "SPD02SA = 43.2;\n",
        "SPD02NS = 47.8;\n",
        "SPD02SN = 33.3;\n",
        "SPD02TH = 39.9;\n",
        "SPD02HN = 39.7;\n",
        "SPD02NW = 43;\n",
        "SPD02BY = 26.1;\n",
        "SPD02BW = 33.5;\n",
        "SPD02RP = 38.2;\n",
        "SPD02SL = 46;\n",
        "SPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n",
        "\n",
        "UN02MV = 30.3;\n",
        "UN02SH = 36;\n",
        "UN02HM = 42;\n",
        "UN02BR = 24.6;\n",
        "UN02BL = 25.9;\n",
        "UN02BB = 22.3;\n",
        "UN02SA = 29;\n",
        "UN02NS = 34.5;\n",
        "UN02SN = 33.6;\n",
        "UN02TH = 29.4;\n",
        "UN02HN = 37.1;\n",
        "UN02NW = 35.1;\n",
        "UN02BY = 58.6;\n",
        "UN02BW = 42.8;\n",
        "UN02RP = 40.3;\n",
        "UN02SL = 35;\n",
        "UN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n",
        "\n",
        "BG02MV = 3.5;\n",
        "BG02SH = 9.4;\n",
        "BG02HM = 16.2;\n",
        "BG02BR = 15;\n",
        "BG02BL = 14.6;\n",
        "BG02BB = 4.5;\n",
        "BG02SA = 3.4;\n",
        "BG02NS = 7.3;\n",
        "BG02SN = 4.6;\n",
        "BG02TH = 4.3;\n",
        "BG02HN = 10.7;\n",
        "BG02NW = 8.9;\n",
        "BG02BY = 7.6;\n",
        "BG02BW = 11.4;\n",
        "BG02RP = 7.9;\n",
        "BG02SL = 7.6;\n",
        "BG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n",
        "\n",
        "FDP02MV = 5.4;\n",
        "FDP02SH = 8;\n",
        "FDP02HM = 6.8;\n",
        "FDP02BR = 6.7;\n",
        "FDP02BL = 6.6;\n",
        "FDP02BB = 5.8;\n",
        "FDP02SA = 7.6;\n",
        "FDP02NS = 7.1;\n",
        "FDP02SN = 7.3;\n",
        "FDP02TH = 5.9;\n",
        "FDP02HN = 8.2;\n",
        "FDP02NW = 9.4;\n",
        "FDP02BY = 4.5;\n",
        "FDP02BW = 7.8;\n",
        "FDP02RP = 9.3;\n",
        "FDP02SL = 6.4;\n",
        "FDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n",
        "\n",
        "PDS02MV = 16.3;\n",
        "PDS02SH = 1.3;\n",
        "PDS02HM = 2.1;\n",
        "PDS02BR = 2.2;\n",
        "PDS02BL = 11.4;\n",
        "PDS02BB = 17.2;\n",
        "PDS02SA = 14.4;\n",
        "PDS02NS = 1;\n",
        "PDS02SN = 16.2;\n",
        "PDS02TH = 17;\n",
        "PDS02HN = 1.3;\n",
        "PDS02NW = 1.2;\n",
        "PDS02BY = 0.7;\n",
        "PDS02BW = 1;\n",
        "PDS02RP = 1;\n",
        "PDS02SL = 1.4;\n",
        "PDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n",
        "\n",
        "MV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\n",
        "SH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\n",
        "HM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\n",
        "BR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\n",
        "BL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\n",
        "BB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\n",
        "SA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\n",
        "NS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\n",
        "SN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\n",
        "TH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\n",
        "HN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\n",
        "NW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\n",
        "BY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\n",
        "BW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\n",
        "RP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\n",
        "SL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);"
      ],
      "id": "959c788c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n"
      ],
      "id": "c7d1b99e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Bundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\n",
        "Laender = np.array([1 ,2, 3, 4,\n",
        "                    5, 6, 7, 8,\n",
        "                    9, 10, 11, 12,\n",
        "                    13, 14, 15, 16]);\n",
        "plt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \n",
        "plt.xticks(Laender,Bundeslaender,rotation=90)\n",
        "plt.ylabel(\"% of Total Votes\") \n",
        "plt.xlabel(\"bundeslaender\") \n",
        "plt.title(\"2002 FDP Election Results\") \n",
        "plt.legend() \n",
        "plt.show() "
      ],
      "id": "ab730095",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Very yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n"
      ],
      "id": "5082e1dc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Bundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\n",
        "Laender = np.array([1 ,2, 3, 4,\n",
        "                    5, 6, 7, 8,\n",
        "                    9, 10, 11, 12,\n",
        "                    13, 14, 15, 16]);\n",
        "plt.plot(Laender, SPD02DE, label = 'SPD',color='red') \n",
        "plt.plot(Laender, UN02DE, label = 'Union',color='black') \n",
        "plt.plot(Laender, BG02DE, label = 'SPDE',color='green') \n",
        "plt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \n",
        "plt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \n",
        "plt.xticks(Laender,Bundeslaender,rotation=90)\n",
        "plt.ylabel(\"% of Total Votes\") \n",
        "plt.xlabel(\"Bundeslaender\") \n",
        "plt.title(\"2002 German Election Results\") \n",
        "plt.legend() \n",
        "plt.legend(loc='right')\n",
        "plt.show() "
      ],
      "id": "0c5ce09c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Maybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n"
      ],
      "id": "b2c85710"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.style.use('_mpl-gallery-nogrid')\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.hexbin(Laender, UN02DE, gridsize=20)\n",
        "\n",
        "ax.set(xlim=(0,20), ylim=(20,60))\n",
        "\n",
        "plt.show()"
      ],
      "id": "bac85bb0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it'll shows minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which  states are where within this box plot.\n"
      ],
      "id": "c501b41d"
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true
      },
      "source": [
        "labels=['SPD','UN','BG','FDP','PDS']\n",
        "colors=['red','black','green','#FFFF00','#A2142F']\n",
        "\n",
        "ELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\n",
        "plt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\n",
        "for patch, color in zip(ELplot['boxes'], colors):\n",
        "    patch.set_facecolor(color)\n",
        "plt.show()"
      ],
      "id": "b123d525",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\ianwe\\AppData\\Roaming\\jupyterlab-desktop\\envs\\env_1\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}