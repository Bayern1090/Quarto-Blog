{
  "hash": "c1836800ff2935cbae2ec8000667950b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Marks and Channels\"\nauthor: \"Ian\"\ncategories: [Marks and Channels]\nimage: \"Morphine Structure.png\"\ncode-fold: true\n---\n\n\nThis is going to be a great time. It is time to create miserable combinations of marks and channels. However, what are marks and channels? Marks are the items of a data, in my case they are the percentages of votes that each party got. Channels are the appearance of marks. Think things like color, shape, size, etc. \n\n Let us skip all the boring code since it is all going to eb recycled from the last post.\n\n::: {#5306310b .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statistics\nfrom matplotlib import cm\n\nSPD02 = 251/603;\nCDU02 = 190/603;\nCSU02 = 58/603;\nBund02 = 55/603;\nFDP02 = 47/603;\nPDS02 = 2/603;\nUnion02=CDU02+CSU02;\n\nSPD02MV = 41.7;\nSPD02SH = 42.9;\nSPD02HM = 42;\nSPD02BR = 48.6;\nSPD02BL = 36.6;\nSPD02BB = 46.4;\nSPD02SA = 43.2;\nSPD02NS = 47.8;\nSPD02SN = 33.3;\nSPD02TH = 39.9;\nSPD02HN = 39.7;\nSPD02NW = 43;\nSPD02BY = 26.1;\nSPD02BW = 33.5;\nSPD02RP = 38.2;\nSPD02SL = 46;\nSPD02DE = np.array([SPD02MV,SPD02SH,SPD02HM,SPD02BR,SPD02BL,SPD02BB,SPD02SA,SPD02NS,SPD02SN,SPD02TH,SPD02HN,SPD02NW,SPD02BY,SPD02BW,SPD02RP,SPD02SL]);\n\nUN02MV = 30.3;\nUN02SH = 36;\nUN02HM = 42;\nUN02BR = 24.6;\nUN02BL = 25.9;\nUN02BB = 22.3;\nUN02SA = 29;\nUN02NS = 34.5;\nUN02SN = 33.6;\nUN02TH = 29.4;\nUN02HN = 37.1;\nUN02NW = 35.1;\nUN02BY = 58.6;\nUN02BW = 42.8;\nUN02RP = 40.3;\nUN02SL = 35;\nUN02DE = np.array([UN02MV,UN02SH,UN02HM,UN02BR,UN02BL,UN02BB,UN02SA,UN02NS,UN02SN,UN02TH,UN02HN,UN02NW,UN02BY,UN02BW,UN02RP,UN02SL]);\n\nBG02MV = 3.5;\nBG02SH = 9.4;\nBG02HM = 16.2;\nBG02BR = 15;\nBG02BL = 14.6;\nBG02BB = 4.5;\nBG02SA = 3.4;\nBG02NS = 7.3;\nBG02SN = 4.6;\nBG02TH = 4.3;\nBG02HN = 10.7;\nBG02NW = 8.9;\nBG02BY = 7.6;\nBG02BW = 11.4;\nBG02RP = 7.9;\nBG02SL = 7.6;\nBG02DE = np.array([BG02MV,BG02SH,BG02HM,BG02BR,BG02BL,BG02BB,BG02SA,BG02NS,BG02SN,BG02TH,BG02HN,BG02NW,BG02BY,BG02BW,BG02RP,BG02SL]);\n\nFDP02MV = 5.4;\nFDP02SH = 8;\nFDP02HM = 6.8;\nFDP02BR = 6.7;\nFDP02BL = 6.6;\nFDP02BB = 5.8;\nFDP02SA = 7.6;\nFDP02NS = 7.1;\nFDP02SN = 7.3;\nFDP02TH = 5.9;\nFDP02HN = 8.2;\nFDP02NW = 9.4;\nFDP02BY = 4.5;\nFDP02BW = 7.8;\nFDP02RP = 9.3;\nFDP02SL = 6.4;\nFDP02DE = np.array([FDP02MV,FDP02SH,FDP02HM,FDP02BR,FDP02BL,FDP02BB,FDP02SA,FDP02NS,FDP02SN,FDP02TH,FDP02HN,FDP02NW,FDP02BY,FDP02BW,FDP02RP,FDP02SL]);\n\nPDS02MV = 16.3;\nPDS02SH = 1.3;\nPDS02HM = 2.1;\nPDS02BR = 2.2;\nPDS02BL = 11.4;\nPDS02BB = 17.2;\nPDS02SA = 14.4;\nPDS02NS = 1;\nPDS02SN = 16.2;\nPDS02TH = 17;\nPDS02HN = 1.3;\nPDS02NW = 1.2;\nPDS02BY = 0.7;\nPDS02BW = 1;\nPDS02RP = 1;\nPDS02SL = 1.4;\nPDS02DE = np.array([PDS02MV,PDS02SH,PDS02HM,PDS02BR,PDS02BL,PDS02BB,PDS02SA,PDS02NS,PDS02SN,PDS02TH,PDS02HN,PDS02NW,PDS02BY,PDS02BW,PDS02RP,PDS02SL]);\n\nMV02 = np.array([SPD02MV, UN02MV,BG02MV,FDP02MV,PDS02MV]);\nSH02 = np.array([SPD02SH, UN02SH,BG02SH,FDP02SH,PDS02SH]);\nHM02 = np.array([SPD02HM, UN02HM,BG02HM,FDP02HM,PDS02HM]);\nBR02 = np.array([SPD02BR, UN02BR,BG02BR,FDP02BR,PDS02BR]);\nBL02 = np.array([SPD02BL, UN02BL,BG02BL,FDP02BL,PDS02BL]);\nBB02 = np.array([SPD02BB, UN02BB,BG02BB,FDP02BB,PDS02BB]);\nSA02 = np.array([SPD02SA, UN02SA,BG02SA,FDP02SA,PDS02SA]);\nNS02 = np.array([SPD02NS, UN02NS,BG02NS,FDP02NS,PDS02NS]);\nSN02 = np.array([SPD02SN, UN02SN,BG02SN,FDP02SN,PDS02SN]);\nTH02 = np.array([SPD02TH, UN02TH,BG02TH,FDP02TH,PDS02TH]);\nHN02 = np.array([SPD02HN, UN02HN,BG02HN,FDP02HN,PDS02HN]);\nNW02 = np.array([SPD02NW, UN02NW,BG02NW,FDP02NW,PDS02NW]);\nBY02 = np.array([SPD02BY, UN02BY,BG02BY,FDP02BY,PDS02BY]);\nBW02 = np.array([SPD02BW, UN02BW,BG02BW,FDP02BW,PDS02BW]);\nRP02 = np.array([SPD02RP, UN02RP,BG02RP,FDP02RP,PDS02RP]);\nSL02 = np.array([SPD02SL, UN02SL,BG02SL,FDP02SL,PDS02SL]);\n```\n:::\n\n\nNow begins the interesting part of trying to make the worst visualizations possible which may be surprisingly difficult. To begin with, I shall do a rerun of the very garishly bright FDP bar graph\n\n::: {#a143a64f .cell execution_count=2}\n``` {.python .cell-code}\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.bar(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"bundeslaender\") \nplt.title(\"2002 FDP Election Results\") \nplt.legend() \nplt.show() \n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-3-output-1.png){width=576 height=612}\n:::\n:::\n\n\nVery yellow much wow. Next, I shall make a connected scatter plot of all the data for the 2002 election to create an excellent mess.\n\n::: {#4f7a6ed3 .cell execution_count=3}\n``` {.python .cell-code}\nBundeslaender = np.array(['Mecklenburg-Vorpommern','Schleswig Holstein','Hamburg','Bremen','Berlin','Brandenburg','Sachsen-Anhalt','Niedersachsen','Sachsen','Thueringen','Hessen','Nordrhein-Westfalen','Bayern','Baden Wuerttemberg','Rheinland-Pfalz','Saarland']);\nLaender = np.array([1 ,2, 3, 4,\n                    5, 6, 7, 8,\n                    9, 10, 11, 12,\n                    13, 14, 15, 16]);\nplt.plot(Laender, SPD02DE, label = 'SPD',color='red') \nplt.plot(Laender, UN02DE, label = 'Union',color='black') \nplt.plot(Laender, BG02DE, label = 'SPDE',color='green') \nplt.plot(Laender, FDP02DE, label = 'FDP',color='#FFFF00') \nplt.plot(Laender, PDS02DE, label = 'PDS',color='#A2142F') \nplt.xticks(Laender,Bundeslaender,rotation=90)\nplt.ylabel(\"% of Total Votes\") \nplt.xlabel(\"Bundeslaender\") \nplt.title(\"2002 German Election Results\") \nplt.legend() \nplt.legend(loc='right')\nplt.show() \n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-4-output-1.png){width=585 height=612}\n:::\n:::\n\n\nMaybe I will try a hexplot next for union 2002. It is a mess and does nothing to help convey information for people to discover trends or be able to identify strongholds of the party.\n\n::: {#2b79994b .cell execution_count=4}\n``` {.python .cell-code}\nplt.style.use('_mpl-gallery-nogrid')\n\nfig, ax = plt.subplots()\n\nax.hexbin(Laender, UN02DE, gridsize=20)\n\nax.set(xlim=(0,20), ylim=(20,60))\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-5-output-1.png){width=238 height=230}\n:::\n:::\n\n\nThe next plot will be a box plot that shows the whole datasets for each party across all different geogrpahic boundaries. Except, this will not show geographic boundaries, it'll show minimum and maximum vote percentages with an unknown confidence interval. Have fun determining which  states are where within this box plot.\n\n::: {#b0aa48b6 .cell execution_count=5}\n``` {.python .cell-code}\nlabels=['SPD','UN','BG','FDP','PDS']\ncolors=['red','black','green','#FFFF00','#A2142F']\n\nELplot=plt.boxplot([SPD02DE,UN02DE,BG02DE,FDP02DE,PDS02DE],patch_artist=\"true\",tick_labels=labels)\nplt.xticks=([1,2,3,4,5], ['SPD02DE','UN02DE','BG02DE','FDP02DE','PDS02DE'])\nfor patch, color in zip(ELplot['boxes'], colors):\n    patch.set_facecolor(color)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-6-output-1.png){width=229 height=226}\n:::\n:::\n\n\nAlso, there is a favorite one of my experiments in data visuzliation I will add back in here\n\n The following plots are attempts to recreate my matlab surface plots. These plots are inevitable Dr. Robison.\n\n::: {#19f9b090 .cell execution_count=6}\n``` {.python .cell-code}\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nFDP02DE2=FDP02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of FDP Votes in DE 2002')\nsurf = ax.plot_surface(x, y, FDP02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-170, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-7-output-1.png){width=317 height=227}\n:::\n:::\n\n\n::: {#2a2138fb .cell execution_count=7}\n``` {.python .cell-code}\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nPDS02DE2=PDS02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of PDS Votes in DE 2002')\nsurf = ax.plot_surface(x, y, PDS02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-150, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-8-output-1.png){width=318 height=247}\n:::\n:::\n\n\n::: {#1f61a450 .cell execution_count=8}\n``` {.python .cell-code}\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n# Plot the surface.\nUN02DE2=UN02DE.reshape(4,4)\ny=np.array([4,3,2,1]);\nx=np.array([1,2,3,4]);\n#surf(x,y,SPD02DE,'LineStyle',\":\")\nplt.ylabel('South-North')\nplt.xlabel('East-West')\n#plt.zlabel('Votes in %')\nplt.title('Surface Map of PDS Votes in DE 2002')\nsurf = ax.plot_surface(x, y, UN02DE2, cmap=cm.coolwarm,linewidth=0, antialiased=False)\nax.view_init(-150, 45)\n#ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)\n```\n\n::: {.cell-output .cell-output-display}\n![](MNC2_files/figure-html/cell-9-output-1.png){width=318 height=247}\n:::\n:::\n\n\n",
    "supporting": [
      "MNC2_files"
    ],
    "filters": [],
    "includes": {}
  }
}